// –£–†–û–ö 3: –ü—Ä–∞–∫—Ç–∏–∫–∞ ‚Äî –ù–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è
// –í–∏–∫–æ–Ω—É–π—Ç–µ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–æ—Å—Ç—É–ø–æ–≤–æ, —Ä–æ–∑–∫–æ–º–µ–Ω—Ç–æ–≤—É—é—á–∏ taskX() –ø–æ —á–µ—Ä–∑—ñ
// –ó–∞–ø—É—Å–∫: dart practice.dart

void main() {
  print('–ü—Ä–∞–∫—Ç–∏–∫–∞ ‚Äî –£—Ä–æ–∫ 3: –ù–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è\n');

  // –†–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
  // task1();
  // task2();
  // task3();
  // task4();
  // task5();

  print('–í—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ solutions.dart –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è.');
}

// =============================================================================
// –ó–ê–í–î–ê–ù–ù–Ø 1: –ë–∞–∑–æ–≤–∞ —ñ—î—Ä–∞—Ä—Ö—ñ—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∏—Ö –∑–∞—Å–æ–±—ñ–≤ (Vehicle)
// =============================================================================

void task1() {
  print('–ó–ê–í–î–ê–ù–ù–Ø 1: –ë–∞–∑–æ–≤–∞ —ñ—î—Ä–∞—Ä—Ö—ñ—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∏—Ö –∑–∞—Å–æ–±—ñ–≤ (Vehicle)');
  print('=' * 50);

  /*
  üîé –©–æ —Ç–∞–∫–µ –Ω–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è?
  –ù–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è ‚Äî —Ü–µ –ø—Ä–∏–Ω—Ü–∏–ø –û–û–ü, —è–∫–∏–π –¥–æ–∑–≤–æ–ª—è—î —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–æ–≤—ñ –∫–ª–∞—Å–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å–Ω—É—é—á–∏—Ö. –î–æ—á—ñ—Ä–Ω—ñ–π –∫–ª–∞—Å —É—Å–ø–∞–¥–∫–æ–≤—É—î –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ —Ç–∞ –º–µ—Ç–æ–¥–∏ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –∫–ª–∞—Å—É.

  üèÅ –ù–∞–≤—ñ—â–æ —Ü–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ?
  –¶–µ –¥–æ–∑–≤–æ–ª—è—î —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –∫–æ–¥—É, —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –ª–æ–≥—ñ—á–Ω—ñ –≥—Ä—É–ø–∏ –æ–±'—î–∫—Ç—ñ–≤ —Ç–∞ —Ä–æ–∑—à–∏—Ä—é–≤–∞—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å —ñ—Å–Ω—É—é—á–∏—Ö –∫–ª–∞—Å—ñ–≤.

  ‚úÖ –©–æ —Ç—Ä–µ–±–∞ –∑—Ä–æ–±–∏—Ç–∏:
  1. –°—Ç–≤–æ—Ä–∏ –±–∞–∑–æ–≤–∏–π –∫–ª–∞—Å Vehicle –∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏:
     - brand (String): –º–∞—Ä–∫–∞
     - model (String): –º–æ–¥–µ–ª—å
     - year (int): —Ä—ñ–∫
     - maxSpeed (int): –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å

  2. –ú–µ—Ç–æ–¥–∏ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—É:
     - start(): –∑–∞–ø—É—Å–∫ –¥–≤–∏–≥—É–Ω–∞
     - stop(): –∑—É–ø–∏–Ω–∫–∞
     - getInfo(): —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∏–π –∑–∞—Å—ñ–±

  3. –°—Ç–≤–æ—Ä–∏ –¥–æ—á—ñ—Ä–Ω—ñ –∫–ª–∞—Å–∏:
     - F1Car extends Vehicle
       - –î–æ–¥–∞—Ç–∫–æ–≤—ñ: team, aerodynamicLevel
       - –ú–µ—Ç–æ–¥–∏: deployDRS(), activateERS()
     
     - RallyCar extends Vehicle
       - –î–æ–¥–∞—Ç–∫–æ–≤—ñ: isFourWheelDrive, terrainType
       - –ú–µ—Ç–æ–¥–∏: switchToOffRoad(), activateDifferential()
     
     - GT3Car extends Vehicle
       - –î–æ–¥–∞—Ç–∫–æ–≤—ñ: enduranceLevel, fuelCapacity
       - –ú–µ—Ç–æ–¥–∏: activateEnduranceMode(), refuel()

  üß© –ü–æ—è—Å–Ω–µ–Ω–Ω—è:
  - extends –æ–∑–Ω–∞—á–∞—î "—Ä–æ–∑—à–∏—Ä—é—î" –∞–±–æ "–Ω–∞—Å–ª—ñ–¥—É—î –≤—ñ–¥"
  - super() –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –∫–ª–∞—Å—É
  - @override –ø–æ–∑–Ω–∞—á–∞—î –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–µ—Ç–æ–¥—É

  üí° –ü—ñ–¥–∫–∞–∑–∫–∞:
  –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π super(brand, model, year, maxSpeed) —É –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞—Ö –¥–æ—á—ñ—Ä–Ω—ñ—Ö –∫–ª–∞—Å—ñ–≤.

  üî® –ü–æ–∫—Ä–æ–∫–æ–≤–∏–π –ø—Ä–∏–∫–ª–∞–¥:

    class Vehicle {
      String brand;
      String model;
      int year;
      int maxSpeed;

      Vehicle(this.brand, this.model, this.year, this.maxSpeed);

      void start() {
        print('$brand $model –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...');
      }

      void stop() {
        print('$brand $model –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è...');
      }

      void getInfo() {
        print('$brand $model ($year), –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å: $maxSpeed –∫–º/–≥–æ–¥');
      }
    }

    class F1Car extends Vehicle {
      String team;
      int aerodynamicLevel;

      F1Car(String brand, String model, int year, int maxSpeed, this.team, this.aerodynamicLevel)
          : super(brand, model, year, maxSpeed);

      void deployDRS() {
        print('DRS –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –¥–ª—è $team');
      }

      void activateERS() {
        print('ERS –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –¥–ª—è $team');
      }

      @override
      void getInfo() {
        super.getInfo();
        print('–ö–æ–º–∞–Ω–¥–∞: $team, –ê–µ—Ä–æ–¥–∏–Ω–∞–º—ñ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å: $aerodynamicLevel');
      }
    }

    class RallyCar extends Vehicle {
      bool isFourWheelDrive;
      String terrainType;

      RallyCar(String brand, String model, int year, int maxSpeed, this.isFourWheelDrive, this.terrainType)
          : super(brand, model, year, maxSpeed);

      void switchToOffRoad() {
        print('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –Ω–∞ –ø–æ–∑–∞—à–ª—è—Ö–æ–≤–∏–π —Ä–µ–∂–∏–º');
      }

      void activateDifferential() {
        print('–î–∏—Ñ–µ—Ä–µ–Ω—Ü—ñ–∞–ª –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ');
      }

      @override
      void getInfo() {
        super.getInfo();
        print('–ü–æ–≤–Ω–∏–π –ø—Ä–∏–≤—ñ–¥: ${isFourWheelDrive ? "–¢–∞–∫" : "–ù—ñ"}, –¢–∏–ø –º—ñ—Å—Ü–µ–≤–æ—Å—Ç—ñ: $terrainType');
      }
    }

    class GT3Car extends Vehicle {
      int enduranceLevel;
      double fuelCapacity;

      GT3Car(String brand, String model, int year, int maxSpeed, this.enduranceLevel, this.fuelCapacity)
          : super(brand, model, year, maxSpeed);

      void activateEnduranceMode() {
        print('–†–µ–∂–∏–º –≤–∏—Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ');
      }

      void refuel() {
        print('–ó–∞–ø—Ä–∞–≤–∫–∞ $fuelCapacity –ª—ñ—Ç—Ä—ñ–≤ –ø–∞–ª—å–Ω–æ–≥–æ');
      }

      @override
      void getInfo() {
        super.getInfo();
        print('–†—ñ–≤–µ–Ω—å –≤–∏—Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ: $enduranceLevel, –Ñ–º–Ω—ñ—Å—Ç—å –±–∞–∫—É: $fuelCapacity –ª');
      }
    }

    void main() {
      Vehicle f1 = F1Car('Red Bull', 'RB19', 2023, 350, 'Red Bull Racing', 3);
      Vehicle rally = RallyCar('Toyota', 'GR Yaris', 2023, 200, true, 'Gravel');
      Vehicle gt3 = GT3Car('Porsche', '911 GT3 R', 2023, 280, 8, 120);

      f1.start();
      f1.getInfo();
      rally.start();
      rally.getInfo();
      gt3.start();
      gt3.getInfo();
    }

  -----------------------------------------------------------------------------
  –Ø–∫—â–æ –Ω–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ ‚Äî —Å–∫–æ–ø—ñ—é–π —Ü–µ–π –ø—Ä–∏–∫–ª–∞–¥ —É solutions.dart —ñ –∑–º—ñ–Ω—é–π –¥–∞–Ω—ñ!
  */

  // –¢—É—Ç —Å—Ç–≤–æ—Ä–∏ —Å–≤–æ—ó –∫–ª–∞—Å–∏ —Ç–∞ –ø—Ä–æ—Ç–µ—Å—Ç—É–π —ó—Ö

  print('');
}

// =============================================================================
// –ó–ê–í–î–ê–ù–ù–Ø 2: –Ü—î—Ä–∞—Ä—Ö—ñ—è –ø—ñ–ª–æ—Ç—ñ–≤ –∑ —Ä—ñ–≤–Ω—è–º–∏ –¥–æ—Å–≤—ñ–¥—É (Driver)
// =============================================================================

void task2() {
  print('–ó–ê–í–î–ê–ù–ù–Ø 2: –Ü—î—Ä–∞—Ä—Ö—ñ—è –ø—ñ–ª–æ—Ç—ñ–≤ –∑ —Ä—ñ–≤–Ω—è–º–∏ –¥–æ—Å–≤—ñ–¥—É (Driver)');
  print('=' * 50);

  /*
  üîé –©–æ —Ç–∞–∫–µ —ñ—î—Ä–∞—Ä—Ö—ñ—è –ø—ñ–ª–æ—Ç—ñ–≤?
  –¶–µ —Å–∏—Å—Ç–µ–º–∞ –∫–ª–∞—Å—ñ–≤, —è–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –ø—ñ–ª–æ—Ç—ñ–≤ –∑ —ó—Ö —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ —Ç–∞ –º–µ—Ç–æ–¥–∞–º–∏.

  üèÅ –ù–∞–≤—ñ—â–æ —Ü–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ?
  –¶–µ –¥–æ–∑–≤–æ–ª—è—î –º–æ–¥–µ–ª—é–≤–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –ø—ñ–ª–æ—Ç—ñ–≤ (F1, —Ä–∞–ª—ñ, –≤–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å) –∑ —ó—Ö —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏.

  ‚úÖ –©–æ —Ç—Ä–µ–±–∞ –∑—Ä–æ–±–∏—Ç–∏:
  1. –°—Ç–≤–æ—Ä–∏ –±–∞–∑–æ–≤–∏–π –∫–ª–∞—Å Driver –∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏:
     - name (String): —ñ–º'—è
     - age (int): –≤—ñ–∫
     - nationality (String): –Ω–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å
     - experienceYears (int): —Ä–æ–∫–∏ –¥–æ—Å–≤—ñ–¥—É

  2. –ú–µ—Ç–æ–¥–∏ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—É:
     - introduce(): –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –ø—ñ–ª–æ—Ç–∞
     - train(): —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
     - getExperienceLevel(): —Ä—ñ–≤–µ–Ω—å –¥–æ—Å–≤—ñ–¥—É

  3. –°—Ç–≤–æ—Ä–∏ –¥–æ—á—ñ—Ä–Ω—ñ –∫–ª–∞—Å–∏:
     - F1Driver extends Driver
       - –î–æ–¥–∞—Ç–∫–æ–≤—ñ: team, championships, raceWins, bestLapTime
       - –ú–µ—Ç–æ–¥–∏: qualify(), race(), getChampionshipStatus()
     
     - RallyDriver extends Driver
       - –î–æ–¥–∞—Ç–∫–æ–≤—ñ: coDriver, rallyWins, terrainSpecialty
       - –ú–µ—Ç–æ–¥–∏: navigate(), switchTerrain(), getRallyStats()
     
     - EnduranceDriver extends Driver
       - –î–æ–¥–∞—Ç–∫–æ–≤—ñ: enduranceWins, staminaLevel, teamRole
       - –ú–µ—Ç–æ–¥–∏: longDistanceRace(), switchDriver(), getEnduranceStats()

  üß© –ü–æ—è—Å–Ω–µ–Ω–Ω—è:
  - –ö–æ–∂–µ–Ω —Ç–∏–ø –ø—ñ–ª–æ—Ç–∞ –º–∞—î —Å–≤–æ—ó —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ —Ç–∞ –º–µ—Ç–æ–¥–∏
  - getExperienceLevel() –º–æ–∂–µ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –ø—ñ–ª–æ—Ç–∞

  üí° –ü—ñ–¥–∫–∞–∑–∫–∞:
  –î–ª—è getExperienceLevel() –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ä—ñ–∑–Ω—É –ª–æ–≥—ñ–∫—É –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø—ñ–ª–æ—Ç—ñ–≤.

  üî® –ü–æ–∫—Ä–æ–∫–æ–≤–∏–π –ø—Ä–∏–∫–ª–∞–¥:

    class Driver {
      String name;
      int age;
      String nationality;
      int experienceYears;

      Driver(this.name, this.age, this.nationality, this.experienceYears);

      void introduce() {
        print('–ü—Ä–∏–≤—ñ—Ç, —è $name –∑ $nationality');
      }

      void train() {
        print('$name —Ç—Ä–µ–Ω—É—î—Ç—å—Å—è...');
      }

      String getExperienceLevel() {
        if (experienceYears < 3) return '–ù–æ–≤–∞—á–æ–∫';
        if (experienceYears < 7) return '–î–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π';
        if (experienceYears < 15) return '–í–µ—Ç–µ—Ä–∞–Ω';
        return '–õ–µ–≥–µ–Ω–¥–∞';
      }
    }

    class F1Driver extends Driver {
      String team;
      int championships;
      int raceWins;
      double bestLapTime;

      F1Driver(String name, int age, String nationality, int experienceYears,
               this.team, this.championships, this.raceWins, this.bestLapTime)
          : super(name, age, nationality, experienceYears);

      void qualify() {
        print('$name –∫–≤–∞–ª—ñ—Ñ—ñ–∫—É—î—Ç—å—Å—è –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ $team');
      }

      void race() {
        print('$name –±–µ—Ä–µ —É—á–∞—Å—Ç—å —É –≥–æ–Ω—Ü—ñ F1');
      }

      String getChampionshipStatus() {
        if (championships > 0) {
          return '$championships-–∫—Ä–∞—Ç–Ω–∏–π —á–µ–º–ø—ñ–æ–Ω —Å–≤—ñ—Ç—É';
        }
        return '–ü–µ—Ä–µ—Å–ª—ñ–¥—É—î –ø–µ—Ä—à–∏–π —Ç–∏—Ç—É–ª';
      }

      @override
      void introduce() {
        super.introduce();
        print('–Ø –ø—ñ–ª–æ—Ç F1 –∫–æ–º–∞–Ω–¥–∏ $team –∑ $raceWins –ø–µ—Ä–µ–º–æ–≥–∞–º–∏');
      }

      @override
      String getExperienceLevel() {
        if (championships > 0) return '–ß–µ–º–ø—ñ–æ–Ω';
        if (raceWins > 10) return '–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å';
        return super.getExperienceLevel();
      }
    }

    class RallyDriver extends Driver {
      String coDriver;
      int rallyWins;
      String terrainSpecialty;

      RallyDriver(String name, int age, String nationality, int experienceYears,
                  this.coDriver, this.rallyWins, this.terrainSpecialty)
          : super(name, age, nationality, experienceYears);

      void navigate() {
        print('$name –Ω–∞–≤—ñ–≥—É—î –∑ $coDriver');
      }

      void switchTerrain() {
        print('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –Ω–∞ $terrainSpecialty');
      }

      String getRallyStats() {
        return '$rallyWins –ø–µ—Ä–µ–º–æ–≥ —É —Ä–∞–ª—ñ, —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è: $terrainSpecialty';
      }

      @override
      void introduce() {
        super.introduce();
        print('–ú—ñ–π —à—Ç—É—Ä–º–∞–Ω: $coDriver, $rallyWins –ø–µ—Ä–µ–º–æ–≥ —É —Ä–∞–ª—ñ');
      }
    }

    class EnduranceDriver extends Driver {
      int enduranceWins;
      int staminaLevel;
      String teamRole;

      EnduranceDriver(String name, int age, String nationality, int experienceYears,
                      this.enduranceWins, this.staminaLevel, this.teamRole)
          : super(name, age, nationality, experienceYears);

      void longDistanceRace() {
        print('$name –±–µ—Ä–µ —É—á–∞—Å—Ç—å —É –¥–æ–≤–≥–æ—Ç—Ä–∏–≤–∞–ª—ñ–π –≥–æ–Ω—Ü—ñ');
      }

      void switchDriver() {
        print('$name –∑–º—ñ–Ω—é—î –ø—ñ–ª–æ—Ç–∞');
      }

      String getEnduranceStats() {
        return '$enduranceWins –ø–µ—Ä–µ–º–æ–≥ —É –≤–∏—Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ, —Ä—ñ–≤–µ–Ω—å –≤–∏—Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ: $staminaLevel/10';
      }

      @override
      void introduce() {
        super.introduce();
        print('–†–æ–ª—å —É –∫–æ–º–∞–Ω–¥—ñ: $teamRole, $enduranceWins –ø–µ—Ä–µ–º–æ–≥ —É –≤–∏—Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ');
      }

      @override
      String getExperienceLevel() {
        if (staminaLevel > 8) return '–í–∏—Ç—Ä–∏–≤–∞–ª–∏–π';
        return super.getExperienceLevel();
      }
    }

    void main() {
      Driver max = F1Driver('–ú–∞–∫—Å –§–µ—Ä—Å—Ç–∞–ø–ø–µ–Ω', 26, '–ù—ñ–¥–µ—Ä–ª–∞–Ω–¥–∏', 8, 'Red Bull', 3, 54, 1.18);
      Driver sebastien = RallyDriver('–°–µ–±–∞—Å—Ç—å—î–Ω –û–∂—å—î', 39, '–§—Ä–∞–Ω—Ü—ñ—è', 15, '–ñ—É–ª—å—î–Ω –Ü–Ω–≥—Ä–∞—Å—Å—ñ—è', 8, '–ê—Å—Ñ–∞–ª—å—Ç');
      Driver fernando = EnduranceDriver('–§–µ—Ä–Ω–∞–Ω–¥–æ –ê–ª–æ–Ω—Å–æ', 42, '–Ü—Å–ø–∞–Ω—ñ—è', 20, 2, 9, '–õ—ñ–¥–µ—Ä –∫–æ–º–∞–Ω–¥–∏');

      max.introduce();
      print('–î–æ—Å–≤—ñ–¥: ${max.getExperienceLevel()}');
      sebastien.introduce();
      print('–î–æ—Å–≤—ñ–¥: ${sebastien.getExperienceLevel()}');
      fernando.introduce();
      print('–î–æ—Å–≤—ñ–¥: ${fernando.getExperienceLevel()}');
    }

  -----------------------------------------------------------------------------
  –Ø–∫—â–æ –Ω–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ ‚Äî —Å–∫–æ–ø—ñ—é–π —Ü–µ–π –ø—Ä–∏–∫–ª–∞–¥ —É solutions.dart —ñ –∑–º—ñ–Ω—é–π –¥–∞–Ω—ñ!
  */

  // –¢—É—Ç —Å—Ç–≤–æ—Ä–∏ —Å–≤–æ—ó –∫–ª–∞—Å–∏ —Ç–∞ –ø—Ä–æ—Ç–µ—Å—Ç—É–π —ó—Ö

  print('');
}

// =============================================================================
// –ó–ê–í–î–ê–ù–ù–Ø 3: –Ü—î—Ä–∞—Ä—Ö—ñ—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–æ—é (TeamMember)
// =============================================================================

void task3() {
  print('–ó–ê–í–î–ê–ù–ù–Ø 3: –Ü—î—Ä–∞—Ä—Ö—ñ—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–æ—é (TeamMember)');
  print('=' * 45);

  /*
  üîé –©–æ —Ç–∞–∫–µ —ñ—î—Ä–∞—Ä—Ö—ñ—è –∫–æ–º–∞–Ω–¥–∏?
  –¶–µ —Å–∏—Å—Ç–µ–º–∞ –∫–ª–∞—Å—ñ–≤, —è–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î —Ä—ñ–∑–Ω—ñ —Ä–æ–ª—ñ –≤ –∫–æ–º–∞–Ω–¥—ñ –§–æ—Ä–º—É–ª–∏ 1 –∑ —ó—Ö —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–º–∏ –æ–±–æ–≤'—è–∑–∫–∞–º–∏.

  üèÅ –ù–∞–≤—ñ—â–æ —Ü–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ?
  –¶–µ –¥–æ–∑–≤–æ–ª—è—î –º–æ–¥–µ–ª—é–≤–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ —Ä–æ–ª—ñ –≤ –∫–æ–º–∞–Ω–¥—ñ (—ñ–Ω–∂–µ–Ω–µ—Ä–∏, –º–µ—Ö–∞–Ω—ñ–∫–∏, –º–µ–Ω–µ–¥–∂–µ—Ä–∏) –∑ —ó—Ö —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏.

  ‚úÖ –©–æ —Ç—Ä–µ–±–∞ –∑—Ä–æ–±–∏—Ç–∏:
  1. –°—Ç–≤–æ—Ä–∏ –±–∞–∑–æ–≤–∏–π –∫–ª–∞—Å TeamMember –∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏:
     - name (String): —ñ–º'—è
     - role (String): —Ä–æ–ª—å
     - salary (double): –∑–∞—Ä–ø–ª–∞—Ç–∞
     - yearsInTeam (int): —Ä–æ–∫–∏ –≤ –∫–æ–º–∞–Ω–¥—ñ

  2. –ú–µ—Ç–æ–¥–∏ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—É:
     - work(): —Ä–æ–±–æ—Ç–∞
     - getSalary(): –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—Ä–ø–ª–∞—Ç–∏
     - getTeamStatus(): —Å—Ç–∞—Ç—É—Å –≤ –∫–æ–º–∞–Ω–¥—ñ

  3. –°—Ç–≤–æ—Ä–∏ –¥–æ—á—ñ—Ä–Ω—ñ –∫–ª–∞—Å–∏:
     - Engineer extends TeamMember
       - –î–æ–¥–∞—Ç–∫–æ–≤—ñ: specialization, certifications, projects
       - –ú–µ—Ç–æ–¥–∏: designSystem(), analyzeData(), getEngineeringStats()
     
     - Mechanic extends TeamMember
       - –î–æ–¥–∞—Ç–∫–æ–≤—ñ: tools, certifications, pitStopExperience
       - –ú–µ—Ç–æ–¥–∏: repairCar(), performPitStop(), getMechanicStats()
     
     - Manager extends TeamMember
       - –î–æ–¥–∞—Ç–∫–æ–≤—ñ: department, teamSize, budget
       - –ú–µ—Ç–æ–¥–∏: manageTeam(), makeDecisions(), getManagementStats()

  üß© –ü–æ—è—Å–Ω–µ–Ω–Ω—è:
  - –ö–æ–∂–Ω–∞ —Ä–æ–ª—å –º–∞—î —Å–≤–æ—ó —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –æ–±–æ–≤'—è–∑–∫–∏ —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  - –ó–∞—Ä–ø–ª–∞—Ç–∞ –º–æ–∂–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏—Å—è –ø–æ-—Ä—ñ–∑–Ω–æ–º—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–æ–ª—ñ

  üí° –ü—ñ–¥–∫–∞–∑–∫–∞:
  –î–ª—è getSalary() –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ä—ñ–∑–Ω—É –ª–æ–≥—ñ–∫—É —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–æ–ª—ñ —Ç–∞ –¥–æ—Å–≤—ñ–¥—É.

  üî® –ü–æ–∫—Ä–æ–∫–æ–≤–∏–π –ø—Ä–∏–∫–ª–∞–¥:

    class TeamMember {
      String name;
      String role;
      double salary;
      int yearsInTeam;

      TeamMember(this.name, this.role, this.salary, this.yearsInTeam);

      void work() {
        print('$name –ø—Ä–∞—Ü—é—î —è–∫ $role');
      }

      double getSalary() {
        return salary;
      }

      String getTeamStatus() {
        if (yearsInTeam < 2) return '–ù–æ–≤–∏–π —á–ª–µ–Ω –∫–æ–º–∞–Ω–¥–∏';
        if (yearsInTeam < 5) return '–î–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π —á–ª–µ–Ω –∫–æ–º–∞–Ω–¥–∏';
        return '–í–µ—Ç–µ—Ä–∞–Ω –∫–æ–º–∞–Ω–¥–∏';
      }
    }

    class Engineer extends TeamMember {
      String specialization;
      List<String> certifications;
      List<String> projects;

      Engineer(String name, String role, double salary, int yearsInTeam,
               this.specialization, this.certifications, this.projects)
          : super(name, role, salary, yearsInTeam);

      void designSystem() {
        print('$name –ø—Ä–æ–µ–∫—Ç—É—î —Å–∏—Å—Ç–µ–º—É –≤ –≥–∞–ª—É–∑—ñ $specialization');
      }

      void analyzeData() {
        print('$name –∞–Ω–∞–ª—ñ–∑—É—î –¥–∞–Ω—ñ —Ç–µ–ª–µ–º–µ—Ç—Ä—ñ—ó');
      }

      String getEngineeringStats() {
        return '–°–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è: $specialization, –°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏: ${certifications.length}, –ü—Ä–æ–µ–∫—Ç–∏: ${projects.length}';
      }

      @override
      void work() {
        print('$name –ø—Ä–∞—Ü—é—î –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º ${projects.isNotEmpty ? projects.last : "–Ω–æ–≤–∏–π"}');
      }

      @override
      double getSalary() {
        double bonus = certifications.length * 1000 + projects.length * 500;
        return salary + bonus;
      }
    }

    class Mechanic extends TeamMember {
      List<String> tools;
      List<String> certifications;
      int pitStopExperience;

      Mechanic(String name, String role, double salary, int yearsInTeam,
               this.tools, this.certifications, this.pitStopExperience)
          : super(name, role, salary, yearsInTeam);

      void repairCar() {
        print('$name —Ä–µ–º–æ–Ω—Ç—É—î –∞–≤—Ç–æ–º–æ–±—ñ–ª—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ ${tools.join(", ")}');
      }

      void performPitStop() {
        print('$name –≤–∏–∫–æ–Ω—É—î –ø—ñ—Ç-—Å—Ç–æ–ø (–¥–æ—Å–≤—ñ–¥: $pitStopExperience)');
      }

      String getMechanicStats() {
        return '–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏: ${tools.length}, –°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏: ${certifications.length}, –ü—ñ—Ç-—Å—Ç–æ–ø–∏: $pitStopExperience';
      }

      @override
      void work() {
        print('$name –ø—ñ–¥–≥–æ—Ç–æ–≤–ª—è—î –∞–≤—Ç–æ–º–æ–±—ñ–ª—å –¥–æ –≥–æ–Ω–∫–∏');
      }

      @override
      double getSalary() {
        double bonus = pitStopExperience * 50 + certifications.length * 200;
        return salary + bonus;
      }
    }

    class Manager extends TeamMember {
      String department;
      int teamSize;
      double budget;

      Manager(String name, String role, double salary, int yearsInTeam,
              this.department, this.teamSize, this.budget)
          : super(name, role, salary, yearsInTeam);

      void manageTeam() {
        print('$name –∫–µ—Ä—É—î –∫–æ–º–∞–Ω–¥–æ—é –∑ $teamSize –ª—é–¥–µ–π —É –≤—ñ–¥–¥—ñ–ª—ñ $department');
      }

      void makeDecisions() {
        print('$name –ø—Ä–∏–π–º–∞—î —Å—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω—ñ —Ä—ñ—à–µ–Ω–Ω—è –∑ –±—é–¥–∂–µ—Ç–æ–º ${budget.toStringAsFixed(0)}');
      }

      String getManagementStats() {
        return '–í—ñ–¥–¥—ñ–ª: $department, –†–æ–∑–º—ñ—Ä –∫–æ–º–∞–Ω–¥–∏: $teamSize, –ë—é–¥–∂–µ—Ç: ${budget.toStringAsFixed(0)}';
      }

      @override
      void work() {
        print('$name –ø–ª–∞–Ω—É—î —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é –∫–æ–º–∞–Ω–¥–∏');
      }

      @override
      double getSalary() {
        double bonus = teamSize * 100 + budget * 0.001;
        return salary + bonus;
      }
    }

    void main() {
      TeamMember engineer = Engineer('–ê–¥—Ä—ñ–∞–Ω –ù—å—é—ó', '–ì–æ–ª–æ–≤–Ω–∏–π —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä', 5000000, 15,
                                   '–ê–µ—Ä–æ–¥–∏–Ω–∞–º—ñ–∫–∞', ['F1', 'Aero'], ['RB19', 'RB20']);
      TeamMember mechanic = Mechanic('–î–∂–æ–Ω –°–º—ñ—Ç', '–ì–æ–ª–æ–≤–Ω–∏–π –º–µ—Ö–∞–Ω—ñ–∫', 80000, 8,
                                    ['–ì–∞–π–∫–æ–≤–µ—Ä—Ç', '–î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç'], ['F1 Safety'], 120);
      TeamMember manager = Manager('–ö—Ä—ñ—Å—Ç—ñ–∞–Ω –•–æ—Ä–Ω–µ—Ä', '–ö–µ—Ä—ñ–≤–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏', 3000000, 18,
                                  '–û–ø–µ—Ä–∞—Ü—ñ—ó', 850, 500000000);

      engineer.work();
      engineer.getTeamStatus();
      mechanic.work();
      mechanic.getTeamStatus();
      manager.work();
      manager.getTeamStatus();
    }

  -----------------------------------------------------------------------------
  –Ø–∫—â–æ –Ω–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ ‚Äî —Å–∫–æ–ø—ñ—é–π —Ü–µ–π –ø—Ä–∏–∫–ª–∞–¥ —É solutions.dart —ñ –∑–º—ñ–Ω—é–π –¥–∞–Ω—ñ!
  */

  // –¢—É—Ç —Å—Ç–≤–æ—Ä–∏ —Å–≤–æ—ó –∫–ª–∞—Å–∏ —Ç–∞ –ø—Ä–æ—Ç–µ—Å—Ç—É–π —ó—Ö

  print('');
}

// =============================================================================
// –ó–ê–í–î–ê–ù–ù–Ø 4: –°–∏—Å—Ç–µ–º–∞ —á–µ–º–ø—ñ–æ–Ω–∞—Ç—ñ–≤ –∑ –Ω–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è–º (Championship)
// =============================================================================

void task4() {
  print('–ó–ê–í–î–ê–ù–ù–Ø 4: –°–∏—Å—Ç–µ–º–∞ —á–µ–º–ø—ñ–æ–Ω–∞—Ç—ñ–≤ –∑ –Ω–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è–º (Championship)');
  print('=' * 50);

  /*
  üîé –©–æ —Ç–∞–∫–µ —Å–∏—Å—Ç–µ–º–∞ —á–µ–º–ø—ñ–æ–Ω–∞—Ç—ñ–≤?
  –¶–µ —Å–∏—Å—Ç–µ–º–∞ –∫–ª–∞—Å—ñ–≤, —è–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ —á–µ–º–ø—ñ–æ–Ω–∞—Ç—ñ–≤ –∑ —ó—Ö —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Ç–∞ —Å–∏—Å—Ç–µ–º–∞–º–∏ –±–∞–ª—ñ–≤.

  üèÅ –ù–∞–≤—ñ—â–æ —Ü–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ?
  –¶–µ –¥–æ–∑–≤–æ–ª—è—î –º–æ–¥–µ–ª—é–≤–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –∑–º–∞–≥–∞–Ω—å (F1, —Ä–∞–ª—ñ, –≤–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å) –∑ —ó—Ö —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏.

  ‚úÖ –©–æ —Ç—Ä–µ–±–∞ –∑—Ä–æ–±–∏—Ç–∏:
  1. –°—Ç–≤–æ—Ä–∏ –±–∞–∑–æ–≤–∏–π –∫–ª–∞—Å Championship –∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏:
     - name (String): –Ω–∞–∑–≤–∞
     - year (int): —Ä—ñ–∫
     - numberOfRounds (int): –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∞—É–Ω–¥—ñ–≤
     - participants (List<String>): —É—á–∞—Å–Ω–∏–∫–∏

  2. –ú–µ—Ç–æ–¥–∏ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—É:
     - addParticipant(): –¥–æ–¥–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫–∞
     - startSeason(): –ø–æ—á–∞—Ç–∏ —Å–µ–∑–æ–Ω
     - getStandings(): –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—ó

  3. –°—Ç–≤–æ—Ä–∏ –¥–æ—á—ñ—Ä–Ω—ñ –∫–ª–∞—Å–∏:
     - F1Championship extends Championship
       - –î–æ–¥–∞—Ç–∫–æ–≤—ñ: constructors, drivers, sprintRaces
       - –ú–µ—Ç–æ–¥–∏: addConstructor(), addDriver(), calculatePoints()
     
     - RallyChampionship extends Championship
       - –î–æ–¥–∞—Ç–∫–æ–≤—ñ: events, terrainTypes, coDrivers
       - –ú–µ—Ç–æ–¥–∏: addEvent(), addTerrain(), calculateRallyPoints()
     
     - EnduranceChampionship extends Championship
       - –î–æ–¥–∞—Ç–∫–æ–≤—ñ: races, carClasses, driverTeams
       - –ú–µ—Ç–æ–¥–∏: addRace(), addCarClass(), calculateEndurancePoints()

  üß© –ü–æ—è—Å–Ω–µ–Ω–Ω—è:
  - –ö–æ–∂–µ–Ω —Ç–∏–ø —á–µ–º–ø—ñ–æ–Ω–∞—Ç—É –º–∞—î —Å–≤–æ—ó –ø—Ä–∞–≤–∏–ª–∞ —Ç–∞ —Å–∏—Å—Ç–µ–º—É –±–∞–ª—ñ–≤
  - addParticipant() –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –ø–æ-—Ä—ñ–∑–Ω–æ–º—É –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤

  üí° –ü—ñ–¥–∫–∞–∑–∫–∞:
  –î–ª—è addParticipant() –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ä—ñ–∑–Ω—É –ª–æ–≥—ñ–∫—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É —á–µ–º–ø—ñ–æ–Ω–∞—Ç—É.

  üî® –ü–æ–∫—Ä–æ–∫–æ–≤–∏–π –ø—Ä–∏–∫–ª–∞–¥:

    class Championship {
      String name;
      int year;
      int numberOfRounds;
      List<String> participants = [];

      Championship(this.name, this.year, this.numberOfRounds);

      void addParticipant(String participant) {
        if (!participants.contains(participant)) {
          participants.add(participant);
          print('$participant –¥–æ–¥–∞–Ω–æ –¥–æ $name');
        }
      }

      void startSeason() {
        print('–°–µ–∑–æ–Ω $name $year –ø–æ—á–∞–≤—Å—è –∑ ${participants.length} —É—á–∞—Å–Ω–∏–∫–∞–º–∏');
      }

      void getStandings() {
        print('–ü–æ–∑–∏—Ü—ñ—ó –≤ $name:');
        for (int i = 0; i < participants.length; i++) {
          print('${i + 1}. ${participants[i]}');
        }
      }
    }

    class F1Championship extends Championship {
      List<String> constructors = [];
      List<String> drivers = [];
      int sprintRaces;

      F1Championship(String name, int year, int numberOfRounds, this.sprintRaces)
          : super(name, year, numberOfRounds);

      void addConstructor(String constructor) {
        if (!constructors.contains(constructor)) {
          constructors.add(constructor);
          print('–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä $constructor –¥–æ–¥–∞–Ω–æ –¥–æ F1');
        }
      }

      void addDriver(String driver) {
        if (!drivers.contains(driver)) {
          drivers.add(driver);
          print('–ü—ñ–ª–æ—Ç $driver –¥–æ–¥–∞–Ω–æ –¥–æ F1');
        }
      }

      void calculatePoints() {
        print('–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –±–∞–ª—ñ–≤ F1: 1-—à–µ –º—ñ—Å—Ü–µ = 25 –±–∞–ª—ñ–≤, 2-–≥–µ = 18, —Ç–æ—â–æ');
      }

      @override
      void addParticipant(String participant) {
        // F1 –º–∞—î —ñ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ñ–≤, —ñ –ø—ñ–ª–æ—Ç—ñ–≤
        if (participant.contains('Racing') || participant.contains('Team')) {
          addConstructor(participant);
        } else {
          addDriver(participant);
        }
      }

      @override
      void getStandings() {
        print('–ü–æ–∑–∏—Ü—ñ—ó –≤ F1 $name:');
        print('–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∏: ${constructors.join(", ")}');
        print('–ü—ñ–ª–æ—Ç–∏: ${drivers.join(", ")}');
        print('–°–ø—Ä–∏–Ω—Ç-–≥–æ–Ω–∫–∏: $sprintRaces');
      }
    }

    class RallyChampionship extends Championship {
      List<String> events = [];
      List<String> terrainTypes = [];
      List<String> coDrivers = [];

      RallyChampionship(String name, int year, int numberOfRounds)
          : super(name, year, numberOfRounds);

      void addEvent(String event) {
        if (!events.contains(event)) {
          events.add(event);
          print('–ï—Ç–∞–ø $event –¥–æ–¥–∞–Ω–æ –¥–æ —Ä–∞–ª—ñ');
        }
      }

      void addTerrain(String terrain) {
        if (!terrainTypes.contains(terrain)) {
          terrainTypes.add(terrain);
          print('–¢–∏–ø –º—ñ—Å—Ü–µ–≤–æ—Å—Ç—ñ $terrain –¥–æ–¥–∞–Ω–æ');
        }
      }

      void calculateRallyPoints() {
        print('–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –±–∞–ª—ñ–≤ —Ä–∞–ª—ñ: –ø–µ—Ä–µ–º–æ–≥–∞ = 25 –±–∞–ª—ñ–≤, 2-–≥–µ = 18, —Ç–æ—â–æ');
      }

      @override
      void addParticipant(String participant) {
        // –†–∞–ª—ñ –º–∞—î –∫–æ–º–∞–Ω–¥–∏
        super.addParticipant(participant);
        print('–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–ª—ñ $participant –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞');
      }

      @override
      void getStandings() {
        print('–ü–æ–∑–∏—Ü—ñ—ó –≤ —Ä–∞–ª—ñ $name:');
        print('–ï—Ç–∞–ø–∏: ${events.join(", ")}');
        print('–¢–∏–ø–∏ –º—ñ—Å—Ü–µ–≤–æ—Å—Ç—ñ: ${terrainTypes.join(", ")}');
        print('–£—á–∞—Å–Ω–∏–∫–∏: ${participants.join(", ")}');
      }
    }

    class EnduranceChampionship extends Championship {
      List<String> races = [];
      List<String> carClasses = [];
      List<String> driverTeams = [];

      EnduranceChampionship(String name, int year, int numberOfRounds)
          : super(name, year, numberOfRounds);

      void addRace(String race) {
        if (!races.contains(race)) {
          races.add(race);
          print('–ì–æ–Ω–∫–∞ $race –¥–æ–¥–∞–Ω–∞ –¥–æ –≤–∏—Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ');
        }
      }

      void addCarClass(String carClass) {
        if (!carClasses.contains(carClass)) {
          carClasses.add(carClass);
          print('–ö–ª–∞—Å –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ $carClass –¥–æ–¥–∞–Ω–æ');
        }
      }

      void calculateEndurancePoints() {
        print('–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –±–∞–ª—ñ–≤ –≤–∏—Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ: –ø–µ—Ä–µ–º–æ–≥–∞ = 25 –±–∞–ª—ñ–≤, 2-–≥–µ = 18, —Ç–æ—â–æ');
      }

      @override
      void addParticipant(String participant) {
        // –í–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –º–∞—î –∫–æ–º–∞–Ω–¥–∏
        super.addParticipant(participant);
        driverTeams.add(participant);
        print('–ö–æ–º–∞–Ω–¥–∞ –≤–∏—Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ $participant –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞');
      }

      @override
      void getStandings() {
        print('–ü–æ–∑–∏—Ü—ñ—ó —É –≤–∏—Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ $name:');
        print('–ì–æ–Ω–∫–∏: ${races.join(", ")}');
        print('–ö–ª–∞—Å–∏ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤: ${carClasses.join(", ")}');
        print('–ö–æ–º–∞–Ω–¥–∏: ${driverTeams.join(", ")}');
      }
    }

    void main() {
      Championship f1 = F1Championship('–ß–µ–º–ø—ñ–æ–Ω–∞—Ç —Å–≤—ñ—Ç—É –§–æ—Ä–º—É–ª–∏ 1', 2024, 24, 6);
      Championship rally = RallyChampionship('–ß–µ–º–ø—ñ–æ–Ω–∞—Ç —Å–≤—ñ—Ç—É —Ä–∞–ª—ñ', 2024, 13);
      Championship endurance = EnduranceChampionship('–ß–µ–º–ø—ñ–æ–Ω–∞—Ç —Å–≤—ñ—Ç—É –≤–∏—Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ', 2024, 8);

      f1.addParticipant('Red Bull Racing');
      f1.addParticipant('–ú–∞–∫—Å –§–µ—Ä—Å—Ç–∞–ø–ø–µ–Ω');
      rally.addParticipant('Toyota Gazoo Racing');
      endurance.addParticipant('Toyota Gazoo Racing');

      f1.startSeason();
      rally.startSeason();
      endurance.startSeason();
    }

  -----------------------------------------------------------------------------
  –Ø–∫—â–æ –Ω–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ ‚Äî —Å–∫–æ–ø—ñ—é–π —Ü–µ–π –ø—Ä–∏–∫–ª–∞–¥ —É solutions.dart —ñ –∑–º—ñ–Ω—é–π –¥–∞–Ω—ñ!
  */

  // –¢—É—Ç —Å—Ç–≤–æ—Ä–∏ —Å–≤–æ—ó –∫–ª–∞—Å–∏ —Ç–∞ –ø—Ä–æ—Ç–µ—Å—Ç—É–π —ó—Ö

  print('');
}

// =============================================================================
// –ó–ê–í–î–ê–ù–ù–Ø 5: –ü—Ä–æ—Å—É–Ω—É—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è –∑ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º–∏
// =============================================================================

void task5() {
  print('–ó–ê–í–î–ê–ù–ù–Ø 5: –ü—Ä–æ—Å—É–Ω—É—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è –∑ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º–∏');
  print('=' * 55);

  /*
  üîé –©–æ —Ç–∞–∫–µ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏ –≤ –Ω–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—ñ?
  –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏ –≤–∏–∑–Ω–∞—á–∞—é—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç, —è–∫–∏–π –∫–ª–∞—Å–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏. –í–æ–Ω–∏ –¥–æ–∑–≤–æ–ª—è—é—Ç—å —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏, —è–∫—ñ –¥–æ—á—ñ—Ä–Ω—ñ –∫–ª–∞—Å–∏ –ø–æ–≤–∏–Ω–Ω—ñ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏.

  üèÅ –ù–∞–≤—ñ—â–æ —Ü–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ?
  –¶–µ –∑–∞–±–µ–∑–ø–µ—á—É—î —É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫–ª–∞—Å—ñ–≤ —Ç–∞ –¥–æ–∑–≤–æ–ª—è—î —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –±—ñ–ª—å—à –≥–Ω—É—á–∫—ñ —Å–∏—Å—Ç–µ–º–∏.

  ‚úÖ –©–æ —Ç—Ä–µ–±–∞ –∑—Ä–æ–±–∏—Ç–∏:
  1. –°—Ç–≤–æ—Ä–∏ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–π –∫–ª–∞—Å RacingVehicle –∑ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏:
     - startEngine(): –∑–∞–ø—É—Å–∫ –¥–≤–∏–≥—É–Ω–∞
     - accelerate(): –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è
     - brake(): –≥–∞–ª—å–º—É–≤–∞–Ω–Ω—è

  2. –°—Ç–≤–æ—Ä–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å TelemetryProvider –∑ –º–µ—Ç–æ–¥–∞–º–∏:
     - getSpeed(): –æ—Ç—Ä–∏–º–∞—Ç–∏ —à–≤–∏–¥–∫—ñ—Å—Ç—å
     - getFuelLevel(): –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä—ñ–≤–µ–Ω—å –ø–∞–ª—å–Ω–æ–≥–æ
     - getStatus(): –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å

  3. –°—Ç–≤–æ—Ä–∏ –¥–æ—á—ñ—Ä–Ω—ñ –∫–ª–∞—Å–∏:
     - F1Car extends RacingVehicle implements TelemetryProvider
     - RallyCar extends RacingVehicle implements TelemetryProvider
     - ElectricCar extends RacingVehicle implements TelemetryProvider

  üß© –ü–æ—è—Å–Ω–µ–Ω–Ω—è:
  - abstract class –≤–∏–∑–Ω–∞—á–∞—î –±–∞–∑–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å
  - interface –≤–∏–∑–Ω–∞—á–∞—î –∫–æ–Ω—Ç—Ä–∞–∫—Ç, —è–∫–∏–π –∫–ª–∞—Å–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏
  - implements –æ–∑–Ω–∞—á–∞—î "—Ä–µ–∞–ª—ñ–∑—É—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å"

  üí° –ü—ñ–¥–∫–∞–∑–∫–∞:
  –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏ –Ω–µ –º–∞—é—Ç—å —Ç—ñ–ª–∞ —ñ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –≤ –¥–æ—á—ñ—Ä–Ω—ñ—Ö –∫–ª–∞—Å–∞—Ö.

  üî® –ü–æ–∫—Ä–æ–∫–æ–≤–∏–π –ø—Ä–∏–∫–ª–∞–¥:

    // –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–π –±–∞–∑–æ–≤–∏–π –∫–ª–∞—Å
    abstract class RacingVehicle {
      String brand;
      String model;
      int maxSpeed;

      RacingVehicle(this.brand, this.model, this.maxSpeed);

      // –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏ (–ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –≤ –¥–æ—á—ñ—Ä–Ω—ñ—Ö –∫–ª–∞—Å–∞—Ö)
      void startEngine();
      void accelerate();
      void brake();

      // –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –º–µ—Ç–æ–¥ (–º–∞—î —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é)
      void displayInfo() {
        print('$brand $model, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å: $maxSpeed –∫–º/–≥–æ–¥');
      }
    }

    // –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ç–µ–ª–µ–º–µ—Ç—Ä—ñ—ó
    abstract class TelemetryProvider {
      double getSpeed();
      double getFuelLevel();
      String getStatus();
    }

    // F1 –∞–≤—Ç–æ–º–æ–±—ñ–ª—å
    class F1Car extends RacingVehicle implements TelemetryProvider {
      double currentSpeed = 0;
      double fuelLevel = 100;
      bool engineRunning = false;

      F1Car(String brand, String model, int maxSpeed)
          : super(brand, model, maxSpeed);

      @override
      void startEngine() {
        engineRunning = true;
        print('$brand $model: V6 —Ç—É—Ä–±–æ –¥–≤–∏–≥—É–Ω –∑–∞–ø—É—â–µ–Ω–æ');
      }

      @override
      void accelerate() {
        if (engineRunning) {
          currentSpeed = (currentSpeed + 50).clamp(0, maxSpeed.toDouble());
          fuelLevel -= 2;
          print('–ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è –¥–æ ${currentSpeed.toStringAsFixed(0)} –∫–º/–≥–æ–¥');
        }
      }

      @override
      void brake() {
        currentSpeed = (currentSpeed - 30).clamp(0, maxSpeed.toDouble());
        print('–ì–∞–ª—å–º—É–≤–∞–Ω–Ω—è –¥–æ ${currentSpeed.toStringAsFixed(0)} –∫–º/–≥–æ–¥');
      }

      @override
      double getSpeed() => currentSpeed;

      @override
      double getFuelLevel() => fuelLevel;

      @override
      String getStatus() {
        if (!engineRunning) return '–î–≤–∏–≥—É–Ω –≤–∏–º–∫–Ω–µ–Ω–æ';
        if (fuelLevel < 10) return '–ù–∏–∑—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å –ø–∞–ª—å–Ω–æ–≥–æ';
        if (currentSpeed > maxSpeed * 0.9) return '–í–∏—Å–æ–∫–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å';
        return '–ù–æ—Ä–º–∞–ª—å–Ω–∞ —Ä–æ–±–æ—Ç–∞';
      }
    }

    // –†–∞–ª—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å
    class RallyCar extends RacingVehicle implements TelemetryProvider {
      double currentSpeed = 0;
      double fuelLevel = 100;
      bool engineRunning = false;
      bool fourWheelDrive = true;

      RallyCar(String brand, String model, int maxSpeed)
          : super(brand, model, maxSpeed);

      @override
      void startEngine() {
        engineRunning = true;
        print('$brand $model: –î–≤–∏–≥—É–Ω —Ä–∞–ª—ñ –∑–∞–ø—É—â–µ–Ω–æ');
      }

      @override
      void accelerate() {
        if (engineRunning) {
          currentSpeed = (currentSpeed + 30).clamp(0, maxSpeed.toDouble());
          fuelLevel -= 3;
          print('–ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è —Ä–∞–ª—ñ –¥–æ ${currentSpeed.toStringAsFixed(0)} –∫–º/–≥–æ–¥');
        }
      }

      @override
      void brake() {
        currentSpeed = (currentSpeed - 20).clamp(0, maxSpeed.toDouble());
        print('–ì–∞–ª—å–º—É–≤–∞–Ω–Ω—è —Ä–∞–ª—ñ –¥–æ ${currentSpeed.toStringAsFixed(0)} –∫–º/–≥–æ–¥');
      }

      @override
      double getSpeed() => currentSpeed;

      @override
      double getFuelLevel() => fuelLevel;

      @override
      String getStatus() {
        if (!engineRunning) return '–î–≤–∏–≥—É–Ω –≤–∏–º–∫–Ω–µ–Ω–æ';
        if (fuelLevel < 15) return '–ù–∏–∑—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å –ø–∞–ª—å–Ω–æ–≥–æ';
        if (fourWheelDrive) return '–ü–æ–≤–Ω–∏–π –ø—Ä–∏–≤—ñ–¥ –∞–∫—Ç–∏–≤–Ω–∏–π';
        return '–ù–æ—Ä–º–∞–ª—å–Ω–∞ —Ä–æ–±–æ—Ç–∞';
      }
    }

    // –ï–ª–µ–∫—Ç—Ä–æ–º–æ–±—ñ–ª—å
    class ElectricCar extends RacingVehicle implements TelemetryProvider {
      double currentSpeed = 0;
      double batteryLevel = 100;
      bool engineRunning = false;

      ElectricCar(String brand, String model, int maxSpeed)
          : super(brand, model, maxSpeed);

      @override
      void startEngine() {
        engineRunning = true;
        print('$brand $model: –ï–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥—É–Ω –∑–∞–ø—É—â–µ–Ω–æ');
      }

      @override
      void accelerate() {
        if (engineRunning) {
          currentSpeed = (currentSpeed + 40).clamp(0, maxSpeed.toDouble());
          batteryLevel -= 1;
          print('–ï–ª–µ–∫—Ç—Ä–æ –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è –¥–æ ${currentSpeed.toStringAsFixed(0)} –∫–º/–≥–æ–¥');
        }
      }

      @override
      void brake() {
        currentSpeed = (currentSpeed - 25).clamp(0, maxSpeed.toDouble());
        batteryLevel += 0.5; // –†–µ–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω–µ –≥–∞–ª—å–º—É–≤–∞–Ω–Ω—è
        print('–ï–ª–µ–∫—Ç—Ä–æ –≥–∞–ª—å–º—É–≤–∞–Ω–Ω—è –¥–æ ${currentSpeed.toStringAsFixed(0)} –∫–º/–≥–æ–¥');
      }

      @override
      double getSpeed() => currentSpeed;

      @override
      double getFuelLevel() => batteryLevel; // –î–ª—è –µ–ª–µ–∫—Ç—Ä–æ–º–æ–±—ñ–ª—è —Ü–µ —Ä—ñ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ—ó

      @override
      String getStatus() {
        if (!engineRunning) return '–î–≤–∏–≥—É–Ω –≤–∏–º–∫–Ω–µ–Ω–æ';
        if (batteryLevel < 20) return '–ù–∏–∑—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å –±–∞—Ç–∞—Ä–µ—ó';
        if (currentSpeed > maxSpeed * 0.8) return '–í–∏—Å–æ–∫–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å';
        return '–ù–æ—Ä–º–∞–ª—å–Ω–∞ —Ä–æ–±–æ—Ç–∞';
      }
    }

    void main() {
      List<RacingVehicle> vehicles = [
        F1Car('Red Bull', 'RB19', 350),
        RallyCar('Toyota', 'GR Yaris', 200),
        ElectricCar('Tesla', 'Model S Plaid', 320),
      ];

      for (var vehicle in vehicles) {
        vehicle.displayInfo();
        vehicle.startEngine();
        vehicle.accelerate();
        vehicle.accelerate();
        vehicle.brake();

        // –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —Ç–µ–ª–µ–º–µ—Ç—Ä—ñ—ó
        if (vehicle is TelemetryProvider) {
          print('–®–≤–∏–¥–∫—ñ—Å—Ç—å: ${vehicle.getSpeed()} –∫–º/–≥–æ–¥');
          print('–ü–∞–ª—å–Ω–µ/–ë–∞—Ç–∞—Ä–µ—è: ${vehicle.getFuelLevel()}%');
          print('–°—Ç–∞—Ç—É—Å: ${vehicle.getStatus()}');
        }
        print('---');
      }
    }

  -----------------------------------------------------------------------------
  –Ø–∫—â–æ –Ω–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ ‚Äî —Å–∫–æ–ø—ñ—é–π —Ü–µ–π –ø—Ä–∏–∫–ª–∞–¥ —É solutions.dart —ñ –∑–º—ñ–Ω—é–π –¥–∞–Ω—ñ!
  */

  // –¢—É—Ç —Å—Ç–≤–æ—Ä–∏ —Å–≤–æ—ó –∫–ª–∞—Å–∏ —Ç–∞ –ø—Ä–æ—Ç–µ—Å—Ç—É–π —ó—Ö

  print('');
}

// =============================================================================
// –ü–Ü–î–ö–ê–ó–ö–ò –î–õ–Ø –ù–û–í–ê–ß–ö–Ü–í
// =============================================================================

/*
–ü–Ü–î–ö–ê–ó–ö–ò:

1. extends –æ–∑–Ω–∞—á–∞—î "–Ω–∞—Å–ª—ñ–¥—É—î –≤—ñ–¥" - –¥–æ—á—ñ—Ä–Ω—ñ–π –∫–ª–∞—Å –æ—Ç—Ä–∏–º—É—î –≤—Å—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ —Ç–∞ –º–µ—Ç–æ–¥–∏ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ
2. super() –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –∫–ª–∞—Å—É
3. @override –ø–æ–∑–Ω–∞—á–∞—î –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–µ—Ç–æ–¥—É –∑ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –∫–ª–∞—Å—É
4. abstract class –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –Ω–∞–ø—Ä—è–º—É, —Ç—ñ–ª—å–∫–∏ —á–µ—Ä–µ–∑ –¥–æ—á—ñ—Ä–Ω—ñ –∫–ª–∞—Å–∏
5. implements –æ–∑–Ω–∞—á–∞—î "—Ä–µ–∞–ª—ñ–∑—É—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å" - –∫–ª–∞—Å –ø–æ–≤–∏–Ω–µ–Ω —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≤—Å—ñ –º–µ—Ç–æ–¥–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É

DART:
- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π super –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –∫–ª–∞—Å—É
- abstract –º–µ—Ç–æ–¥–∏ –Ω–µ –º–∞—é—Ç—å —Ç—ñ–ª–∞ —ñ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ
- is –ø–µ—Ä–µ–≤—ñ—Ä—è—î —Ç–∏–ø –æ–±'—î–∫—Ç–∞
- as –ø—Ä–∏–≤–æ–¥–∏—Ç—å —Ç–∏–ø –æ–±'—î–∫—Ç–∞
*/

import 'dart:convert';
import 'dart:io';

class ProgressTracker {
  static const String _progressFile = 'progress.json';
  static Map<String, dynamic> _progress = {};

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–≥—Ä–µ—Å—É
  static void initialize() {
    _loadProgress();
    _ensureAllLessonsExist();
  }

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –∑ —Ñ–∞–π–ª—É
  static void _loadProgress() {
    try {
      final file = File(_progressFile);
      if (file.existsSync()) {
        final content = file.readAsStringSync();
        _progress = json.decode(content);
      }
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É: $e');
      _progress = {};
    }
  }

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É —É —Ñ–∞–π–ª
  static void _saveProgress() {
    try {
      final file = File(_progressFile);
      file.writeAsStringSync(json.encode(_progress), flush: true);
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É: $e');
    }
  }

  // –ü–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è, —â–æ –≤—Å—ñ —É—Ä–æ–∫–∏ —ñ—Å–Ω—É—é—Ç—å —É –ø—Ä–æ–≥—Ä–µ—Å—ñ
  static void _ensureAllLessonsExist() {
    for (int i = 1; i <= 6; i++) {
      final lessonKey = 'lesson_0$i';
      if (!_progress.containsKey(lessonKey)) {
        _progress[lessonKey] = {
          'task1': false,
          'task2': false,
          'task3': false,
          'task4': false,
          'task5': false,
        };
      }
    }
    _saveProgress();
  }

  // –ü–æ–∑–Ω–∞—á–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ
  static void markTaskCompleted(String lesson, String task) {
    if (!_progress.containsKey(lesson)) {
      _progress[lesson] = {};
    }
    _progress[lesson][task] = true;
    _saveProgress();
  }

  // –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–≤–¥–∞–Ω–Ω—è
  static bool isTaskCompleted(String lesson, String task) {
    return _progress[lesson]?[task] == true;
  }

  // –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å —É—Ä–æ–∫—É
  static Map<String, bool> getLessonProgress(String lesson) {
    return Map<String, bool>.from(_progress[lesson] ?? {});
  }

  // –ü—ñ–¥—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å
  static Map<String, int> getOverallProgress() {
    Map<String, int> overall = {};

    for (int i = 1; i <= 6; i++) {
      final lessonKey = 'lesson_0$i';
      final lessonProgress = getLessonProgress(lessonKey);
      final completed = lessonProgress.values
          .where((completed) => completed)
          .length;
      final total = lessonProgress.length;
      overall[lessonKey] = completed;
    }

    return overall;
  }

  // –í—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å —É —Ç–µ—Ä–º—ñ–Ω–∞–ª—ñ
  static void displayProgress() {
    print('\nüèÅ –ü–†–û–ì–†–ï–° –ö–£–†–°–£ OOP DART - FORMULA 1');
    print('=' * 50);

    final overall = getOverallProgress();
    int totalCompleted = 0;
    int totalTasks = 0;

    for (int i = 1; i <= 6; i++) {
      final lessonKey = 'lesson_0$i';
      final lessonProgress = getLessonProgress(lessonKey);
      final completed = overall[lessonKey] ?? 0;
      final total = lessonProgress.length;

      totalCompleted += completed;
      totalTasks += total;

      // –ù–∞–∑–≤–∏ —É—Ä–æ–∫—ñ–≤
      final lessonNames = {
        'lesson_01': '–£—Ä–æ–∫ 1: –ö–ª–∞—Å–∏ —Ç–∞ –æ–±\'—î–∫—Ç–∏',
        'lesson_02': '–£—Ä–æ–∫ 2: –Ü–Ω–∫–∞–ø—Å—É–ª—è—Ü—ñ—è',
        'lesson_03': '–£—Ä–æ–∫ 3: –ù–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è',
        'lesson_04': '–£—Ä–æ–∫ 4: –ü–æ–ª—ñ–º–æ—Ä—Ñ—ñ–∑–º',
        'lesson_05': '–£—Ä–æ–∫ 5: –ê–±—Å—Ç—Ä–∞–∫—Ü—ñ—è',
        'lesson_06': '–£—Ä–æ–∫ 6: –§—ñ–Ω–∞–ª—å–Ω–∏–π –ø—Ä–æ–µ–∫—Ç',
      };

      final lessonName = lessonNames[lessonKey] ?? lessonKey;
      final percentage = total > 0 ? (completed * 100 / total).round() : 0;

      print('\nüìö $lessonName');
      print('   –ü—Ä–æ–≥—Ä–µ—Å: $completed/$total –∑–∞–≤–¥–∞–Ω—å ($percentage%)');

      // –ß–µ–∫–±–æ–∫—Å–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
      for (int j = 1; j <= 5; j++) {
        final taskKey = 'task$j';
        final isCompleted = lessonProgress[taskKey] == true;
        final checkbox = isCompleted ? '‚úÖ' : '‚≠ï';
        print('   $checkbox –ó–∞–≤–¥–∞–Ω–Ω—è $j');
      }
    }

    // –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å
    final totalPercentage = totalTasks > 0
        ? (totalCompleted * 100 / totalTasks).round()
        : 0;
    print('\n' + '=' * 50);
    print(
      'üéØ –ó–ê–ì–ê–õ–¨–ù–ò–ô –ü–†–û–ì–†–ï–°: $totalCompleted/$totalTasks –∑–∞–≤–¥–∞–Ω—å ($totalPercentage%)',
    );

    // –ü—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä
    final progressBarLength = 30;
    final filledLength = (totalPercentage * progressBarLength / 100).round();
    final progressBar =
        '‚ñà' * filledLength + '‚ñë' * (progressBarLength - filledLength);
    print('üìä [$progressBar] $totalPercentage%');
    print('=' * 50);
  }

  // –û—á–∏—Å—Ç–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
  static void resetProgress() {
    _progress = {};
    _ensureAllLessonsExist();
    print('üîÑ –ü—Ä–æ–≥—Ä–µ—Å —Å–∫–∏–Ω—É—Ç–æ!');
  }
}

import '../progress.dart';

// –£–†–û–ö 6: –ü—Ä–∞–∫—Ç–∏–∫–∞ ‚Äî –§—ñ–Ω–∞–ª—å–Ω–∏–π –ø—Ä–æ–µ–∫—Ç
// –í–∏–∫–æ–Ω—É–π—Ç–µ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–æ—Å—Ç—É–ø–æ–≤–æ, —Ä–æ–∑–∫–æ–º–µ–Ω—Ç–æ–≤—É—é—á–∏ taskX() –ø–æ —á–µ—Ä–∑—ñ
// –ó–∞–ø—É—Å–∫: dart practice.dart

void main() {
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å-—Ç—Ä–µ–∫–µ—Ä
  ProgressTracker.initialize();

  // –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –∫—É—Ä—Å—É
  ProgressTracker.displayProgress();

  print('\nüéØ –ü–†–ê–ö–¢–ò–ö–ê ‚Äî –£–†–û–ö 6: –§–Ü–ù–ê–õ–¨–ù–ò–ô –ü–†–û–ï–ö–¢');
  print('=' * 50);

  // –†–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
  // task1();
  // task2();
  // task3();
  // task4();
  // task5();

  print('\nüí° –ü–æ—Ä–∞–¥–∞: –†–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ task1() –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏!');
  print('üìö –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ solutions.dart –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.');
}

// =============================================================================
// –ó–ê–í–î–ê–ù–ù–Ø 1: –ë–∞–∑–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ —á–µ–º–ø—ñ–æ–Ω–∞—Ç—É
// =============================================================================

void task1() {
  print('–ó–ê–í–î–ê–ù–ù–Ø 1: –ë–∞–∑–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ —á–µ–º–ø—ñ–æ–Ω–∞—Ç—É');
  print('=' * 45);

  /*
  üîé –©–æ —Ç–∞–∫–µ —Å–∏–º—É–ª—è—Ç–æ—Ä —á–µ–º–ø—ñ–æ–Ω–∞—Ç—É?
  –¶–µ –ø—Ä–æ–≥—Ä–∞–º–∞, —è–∫–∞ –º–æ–¥–µ–ª—é—î –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è —Å–µ–∑–æ–Ω—É –§–æ—Ä–º—É–ª–∏ 1: —Å—Ç–≤–æ—Ä—é—î –ø—ñ–ª–æ—Ç—ñ–≤, –∫–æ–º–∞–Ω–¥–∏, –≥–æ–Ω–∫–∏, –ø—ñ–¥—Ä–∞—Ö–æ–≤—É—î –±–∞–ª–∏ —Ç–∞ –≤–∏–∑–Ω–∞—á–∞—î –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤.

  üèÅ –ù–∞–≤—ñ—â–æ —Ü–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ?
  –¶–µ –¥–æ–∑–≤–æ–ª—è—î –ø–æ—Ç—Ä–µ–Ω—É–≤–∞—Ç–∏ –≤—Å—ñ –ø—Ä–∏–Ω—Ü–∏–ø–∏ –û–û–ü –Ω–∞ –ø—Ä–∞–∫—Ç–∏—Ü—ñ: —ñ–Ω–∫–∞–ø—Å—É–ª—è—Ü—ñ—é, –Ω–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è, –ø–æ–ª—ñ–º–æ—Ä—Ñ—ñ–∑–º, –∞–±—Å—Ç—Ä–∞–∫—Ü—ñ—é —Ç–∞ –≤–∑–∞—î–º–æ–¥—ñ—é –æ–±'—î–∫—Ç—ñ–≤.

  ‚úÖ –©–æ —Ç—Ä–µ–±–∞ –∑—Ä–æ–±–∏—Ç–∏:
  1. –°—Ç–≤–æ—Ä–∏ –∫–ª–∞—Å–∏:
     - Driver: name, team, number, points, wins; –º–µ—Ç–æ–¥–∏ addPoints(), addWin(), getStats()
     - Team: name, drivers, constructorPoints, budget; –º–µ—Ç–æ–¥–∏ addDriver(), calculateTeamPoints(), getTeamStats()
     - Race: name, location, date, results; –º–µ—Ç–æ–¥–∏ addResult(), getPodium(), calculatePoints()
     - Championship: season, races, teams, drivers; –º–µ—Ç–æ–¥–∏ addRace(), addTeam(), getStandings(), simulateSeason()

  2. –†–µ–∞–ª—ñ–∑—É–π –±–∞–∑–æ–≤—ñ –ø—Ä–∏–Ω—Ü–∏–ø–∏ –û–û–ü: —ñ–Ω–∫–∞–ø—Å—É–ª—è—Ü—ñ—è (–ø—Ä–∏–≤–∞—Ç–Ω—ñ –ø–æ–ª—è), –≤–∑–∞—î–º–æ–¥—ñ—è –æ–±'—î–∫—Ç—ñ–≤ (–∫–æ–º–∞–Ω–¥–∞ –º—ñ—Å—Ç–∏—Ç—å –ø—ñ–ª–æ—Ç—ñ–≤, —á–µ–º–ø—ñ–æ–Ω–∞—Ç ‚Äî –∫–æ–º–∞–Ω–¥–∏ —ñ –≥–æ–Ω–∫–∏).

  3. –ü—Ä–æ—Ç–µ—Å—Ç—É–π —Ä–æ–±–æ—Ç—É –∫–ª–∞—Å—ñ–≤: —Å—Ç–≤–æ—Ä–∏ —á–µ–º–ø—ñ–æ–Ω–∞—Ç, –¥–æ–¥–∞–π –∫–æ–º–∞–Ω–¥–∏, –ø—ñ–ª–æ—Ç—ñ–≤, –≥–æ–Ω–∫–∏, —Å–∏–º—É–ª—é–π —Å–µ–∑–æ–Ω, –≤–∏–≤–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.

  üß© –ü–æ—è—Å–Ω–µ–Ω–Ω—è:
  - –ö–æ–∂–µ–Ω –∫–ª–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ —Å–≤–æ—é —á–∞—Å—Ç–∏–Ω—É –ª–æ–≥—ñ–∫–∏
  - –û–±'—î–∫—Ç–∏ –≤–∑–∞—î–º–æ–¥—ñ—é—Ç—å –º—ñ–∂ —Å–æ–±–æ—é —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥–∏

  üí° –ü—ñ–¥–∫–∞–∑–∫–∞:
  –î–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≥–æ–Ω–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π Map<int, Driver> (–ø–æ–∑–∏—Ü—ñ—è -> –ø—ñ–ª–æ—Ç)

  üî® –ü–æ–∫—Ä–æ–∫–æ–≤–∏–π –ø—Ä–∏–∫–ª–∞–¥:

    class Driver {
      String name;
      String team;
      int number;
      int points = 0;
      int wins = 0;

      Driver(this.name, this.team, this.number);

      void addPoints(int pts) {
        points += pts;
      }

      void addWin() {
        wins += 1;
      }

      void getStats() {
        print('$name ($team) ‚Äî $points –±–∞–ª—ñ–≤, –ø–µ—Ä–µ–º–æ–≥: $wins');
      }
    }

    class Team {
      String name;
      List<Driver> drivers = [];
      int constructorPoints = 0;
      double budget;

      Team(this.name, this.budget);

      void addDriver(Driver driver) {
        drivers.add(driver);
      }

      void calculateTeamPoints() {
        constructorPoints = drivers.fold(0, (sum, d) => sum + d.points);
      }

      void getTeamStats() {
        print('–ö–æ–º–∞–Ω–¥–∞ $name ‚Äî $constructorPoints –±–∞–ª—ñ–≤, –±—é–¥–∂–µ—Ç: $budget');
        for (var d in drivers) {
          d.getStats();
        }
      }
    }

    class Race {
      String name;
      String location;
      String date;
      Map<int, Driver> results = {};

      Race(this.name, this.location, this.date);

      void addResult(int position, Driver driver) {
        results[position] = driver;
        if (position == 1) driver.addWin();
        driver.addPoints(_pointsForPosition(position));
      }

      int _pointsForPosition(int pos) {
        switch (pos) {
          case 1: return 25;
          case 2: return 18;
          case 3: return 15;
          case 4: return 12;
          case 5: return 10;
          case 6: return 8;
          case 7: return 6;
          case 8: return 4;
          case 9: return 2;
          case 10: return 1;
          default: return 0;
        }
      }

      void getPodium() {
        print('–ü–æ–¥—ñ—É–º –≥–æ–Ω–∫–∏ $name:');
        for (int i = 1; i <= 3; i++) {
          if (results.containsKey(i)) {
            print('$i. ${results[i]!.name} (${results[i]!.team})');
          }
        }
      }
    }

    class Championship {
      int season;
      List<Race> races = [];
      List<Team> teams = [];
      List<Driver> drivers = [];

      Championship(this.season);

      void addRace(Race race) {
        races.add(race);
      }

      void addTeam(Team team) {
        teams.add(team);
        drivers.addAll(team.drivers);
      }

      void simulateSeason() {
        for (var race in races) {
          race.getPodium();
        }
      }

      void getStandings() {
        drivers.sort((a, b) => b.points.compareTo(a.points));
        print('–ü—ñ–¥—Å—É–º–∫–æ–≤—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å–µ–∑–æ–Ω—É $season:');
        for (int i = 0; i < drivers.length; i++) {
          print('${i + 1}. ${drivers[i].name} (${drivers[i].team}) ‚Äî ${drivers[i].points} –±–∞–ª—ñ–≤');
        }
      }
    }

    void main() {
      Championship championship = Championship(2024);
      Team redBull = Team('Red Bull Racing', 1000000000);
      Driver max = Driver('–ú–∞–∫—Å –§–µ—Ä—Å—Ç–∞–ø–ø–µ–Ω', 'Red Bull Racing', 1);
      Driver checo = Driver('–°–µ—Ä—Ö—ñ–æ –ü–µ—Ä–µ—Å', 'Red Bull Racing', 11);

      redBull.addDriver(max);
      redBull.addDriver(checo);
      championship.addTeam(redBull);

      Race monaco = Race('–ì—Ä–∞–Ω-–ø—Ä—ñ –ú–æ–Ω–∞–∫–æ', '–ú–æ–Ω–∞–∫–æ', '2024-05-26');
      monaco.addResult(1, max);
      monaco.addResult(2, checo);
      championship.addRace(monaco);

      championship.simulateSeason();
      championship.getStandings();
    }

  -----------------------------------------------------------------------------
  –Ø–∫—â–æ –Ω–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ ‚Äî —Å–∫–æ–ø—ñ—é–π —Ü–µ–π –ø—Ä–∏–∫–ª–∞–¥ —É solutions.dart —ñ –∑–º—ñ–Ω—é–π –¥–∞–Ω—ñ!
  */

  // –¢—É—Ç —Å—Ç–≤–æ—Ä–∏ —Å–≤–æ—ó –∫–ª–∞—Å–∏ —Ç–∞ –ø—Ä–æ—Ç–µ—Å—Ç—É–π —ó—Ö

  print('');

  // –ü–æ–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ
  ProgressTracker.markTaskCompleted('lesson_06', 'task1');
  print('\n‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è 1 –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ!');
  print('üìä –ü—Ä–æ–≥—Ä–µ—Å –æ–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.');

  print('');
}

// =============================================================================
// TASK 2: Advanced Race Simulation System
// =============================================================================

void task2() {
  print('TASK 2: Advanced Race Simulation System');
  print('=' * 40);

  /*
  –ó–ê–í–î–ê–ù–ù–Ø:
  –°—Ç–≤–æ—Ä—ñ—Ç—å —Ä–æ–∑—à–∏—Ä–µ–Ω—É —Å–∏—Å—Ç–µ–º—É —Å–∏–º—É–ª—è—Ü—ñ—ó –≥–æ–Ω–æ–∫ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –ø–∞—Ç–µ—Ä–Ω—É –°—Ç—Ä–∞—Ç–µ–≥—ñ—è.
  
  –ß–û–ú–£ –¶–ï –í–ê–ñ–õ–ò–í–û:
  –£ —Ä–µ–∞–ª—å–Ω–∏—Ö –≥–æ–Ω–∫–∞—Ö Formula 1 –∫–æ–∂–µ–Ω –ø—ñ–ª–æ—Ç –º–∞—î —Å–≤–æ—é —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é. –î–µ—è–∫—ñ –∞–≥—Ä–µ—Å–∏–≤–Ω—ñ, 
  —ñ–Ω—à—ñ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ñ, –∞ —Ç—Ä–µ—Ç—ñ –∞–¥–∞–ø—Ç—É—é—Ç—å—Å—è –¥–æ —É–º–æ–≤. –ü–∞—Ç–µ—Ä–Ω –°—Ç—Ä–∞—Ç–µ–≥—ñ—è –¥–æ–∑–≤–æ–ª—è—î 
  –ª–µ–≥–∫–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –ø–æ–≤–µ–¥—ñ–Ω–∫—É –æ–±'—î–∫—Ç–∞ –±–µ–∑ –∑–º—ñ–Ω–∏ –π–æ–≥–æ –∫–æ–¥—É.
  
  –ê–ù–ê–õ–û–ì–Ü–Ø:
  –£—è–≤—ñ—Ç—å, —â–æ –≤–∏ –≥—Ä–∞—î—Ç–µ –≤ —à–∞—Ö–º–∞—Ç–∏. –£ –≤–∞—Å —î —Ä—ñ–∑–Ω—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó: –∞—Ç–∞–∫—É–≤–∞—Ç–∏, 
  –∑–∞—Ö–∏—â–∞—Ç–∏—Å—è –∞–±–æ –∞–¥–∞–ø—Ç—É–≤–∞—Ç–∏—Å—è –¥–æ —Ö–æ–¥—ñ–≤ —Å—É–ø–µ—Ä–Ω–∏–∫–∞. –ö–æ–∂–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è –º–∞—î 
  —Å–≤–æ—ó –ø—Ä–∞–≤–∏–ª–∞, –∞–ª–µ –≤–∏ –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –ø–µ—Ä–µ–º–∏–∫–∞—Ç–∏—Å—è –º—ñ–∂ –Ω–∏–º–∏.
  
  –©–û –í–ò –°–¢–í–û–†–ò–¢–ï:
  1. –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–π –∫–ª–∞—Å RaceStrategy - "—à–∞–±–ª–æ–Ω" –¥–ª—è –≤—Å—ñ—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π
  2. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó: AggressiveStrategy, ConservativeStrategy, AdaptiveStrategy
  3. –ö–ª–∞—Å RaceSimulator –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó –≥–æ–Ω–∫–∏
  
  –ü–û–ö–†–û–ö–û–í–Ü –Ü–ù–°–¢–†–£–ö–¶–Ü–á:
  */

  print('üìã –î–ï–¢–ê–õ–¨–ù–Ü –Ü–ù–°–¢–†–£–ö–¶–Ü–á:');
  print('');

  print('–ö–†–û–ö 1: –°—Ç–≤–æ—Ä—ñ—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–π –∫–ª–∞—Å RaceStrategy');
  print('   - –¶–µ –±—É–¥–µ "—à–∞–±–ª–æ–Ω" –¥–ª—è –≤—Å—ñ—Ö —Å—Ç—Ä–∞—Ç–µ–≥—ñ–π –≥–æ–Ω–∫–∏');
  print('   - –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏: executeStrategy(), getStrategyName()');
  print('   - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏: prepareStrategy(), validateStrategy()');
  print('   - –ü—Ä–∏–∫–ª–∞–¥:');
  print('     abstract class RaceStrategy {');
  print('       String getStrategyName();');
  print('       void executeStrategy(Driver driver, String conditions);');
  print('       void prepareStrategy() { /* –∑–∞–≥–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ */ }');
  print('       bool validateStrategy() { /* –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ */ }');
  print('     }');
  print('');

  print('–ö–†–û–ö 2: –°—Ç–≤–æ—Ä—ñ—Ç—å AggressiveStrategy (–ê–≥—Ä–µ—Å–∏–≤–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è)');
  print('   - –†–æ–∑—à–∏—Ä—é—î RaceStrategy');
  print('   - –ú–µ—Ç–æ–¥–∏: pushHard(), takeRisks(), getAggressiveStats()');
  print('   - –õ–æ–≥—ñ–∫–∞: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å, –≤–∏—Å–æ–∫–∏–π —Ä–∏–∑–∏–∫');
  print('   - –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: Max Verstappen —É Monaco');
  print('');

  print('–ö–†–û–ö 3: –°—Ç–≤–æ—Ä—ñ—Ç—å ConservativeStrategy (–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è)');
  print('   - –†–æ–∑—à–∏—Ä—é—î RaceStrategy');
  print('   - –ú–µ—Ç–æ–¥–∏: saveTires(), manageFuel(), getConservativeStats()');
  print('   - –õ–æ–≥—ñ–∫–∞: –µ–∫–æ–Ω–æ–º—ñ—è —Ä–µ—Å—É—Ä—Å—ñ–≤, –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–∏–∑–∏–∫');
  print('   - –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: Lewis Hamilton —É –¥–æ–≤–≥–∏—Ö –≥–æ–Ω–∫–∞—Ö');
  print('');

  print('–ö–†–û–ö 4: –°—Ç–≤–æ—Ä—ñ—Ç—å AdaptiveStrategy (–ê–¥–∞–ø—Ç–∏–≤–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è)');
  print('   - –†–æ–∑—à–∏—Ä—é—î RaceStrategy');
  print(
    '   - –ú–µ—Ç–æ–¥–∏: analyzeConditions(), adjustTactics(), getAdaptiveStats()',
  );
  print('   - –õ–æ–≥—ñ–∫–∞: –∑–º—ñ–Ω–∞ —Ç–∞–∫—Ç–∏–∫–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —É–º–æ–≤');
  print('   - –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: Charles Leclerc —É –∑–º—ñ–Ω–Ω–∏—Ö —É–º–æ–≤–∞—Ö');
  print('');

  print('–ö–†–û–ö 5: –°—Ç–≤–æ—Ä—ñ—Ç—å RaceSimulator (–°–∏–º—É–ª—è—Ç–æ—Ä –≥–æ–Ω–∫–∏)');
  print('   - –í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ: drivers, track, weather, lapCount');
  print('   - –ú–µ—Ç–æ–¥–∏: simulateLap(), calculateOvertaking(), determineDNF()');
  print('   - –õ–æ–≥—ñ–∫–∞: —Å–∏–º—É–ª—è—Ü—ñ—è –≥–æ–Ω–∫–∏ –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è–º–∏');
  print('');

  print('–ü–†–ò–ö–õ–ê–î –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø:');
  print('''
  // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–∏–º—É–ª—è—Ç–æ—Ä
  RaceSimulator simulator = RaceSimulator('Monaco', 'Dry', 78);
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–ª–æ—Ç—ñ–≤
  Driver max = Driver('Max Verstappen', 'Red Bull', 1);
  Driver lewis = Driver('Lewis Hamilton', 'Mercedes', 44);
  Driver charles = Driver('Charles Leclerc', 'Ferrari', 16);
  
  // –î–æ–¥–∞—î–º–æ –ø—ñ–ª–æ—Ç—ñ–≤ –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è–º–∏
  simulator.addDriver(max, AggressiveStrategy());
  simulator.addDriver(lewis, ConservativeStrategy());
  simulator.addDriver(charles, AdaptiveStrategy());
  
  // –°–∏–º—É–ª—é—î–º–æ –≥–æ–Ω–∫—É
  simulator.simulateRace();
  simulator.getRaceResults();
  ''');
  print('');

  print('üí° –ü–û–†–ê–î–ò:');
  print('   - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ enum –¥–ª—è –ø–æ–≥–æ–¥–Ω–∏—Ö —É–º–æ–≤ (Dry, Wet, Mixed)');
  print('   - –î–æ–¥–∞–π—Ç–µ –≤–∏–ø–∞–¥–∫–æ–≤—ñ—Å—Ç—å –¥–ª—è —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–æ—Å—Ç—ñ');
  print('   - –†–æ–∑–≥–ª—è–Ω—å—Ç–µ –≤–ø–ª–∏–≤ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó –Ω–∞ —à–∞–Ω—Å–∏ DNF (Did Not Finish)');
  print('   - –î–æ–¥–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –æ—á–æ–∫ –∑–∞ –ø–æ–∑–∏—Ü—ñ—ó');
  print('');

  // TODO: Create abstract RaceStrategy class

  // TODO: Create concrete strategy classes

  // TODO: Create RaceSimulator class

  // TODO: Test your implementation
  // RaceSimulator simulator = RaceSimulator('Monaco', 'Dry', 78);
  // Driver max = Driver('Max Verstappen', 'Red Bull', 1);
  // Driver lewis = Driver('Lewis Hamilton', 'Mercedes', 44);
  // Driver charles = Driver('Charles Leclerc', 'Ferrari', 16);
  //
  // simulator.addDriver(max, AggressiveStrategy());
  // simulator.addDriver(lewis, ConservativeStrategy());
  // simulator.addDriver(charles, AdaptiveStrategy());
  //
  // simulator.simulateRace();
  // simulator.getRaceResults();

  print('');

  // –ü–æ–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ
  ProgressTracker.markTaskCompleted('lesson_06', 'task2');
  print('\n‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è 2 –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ!');
  print('üìä –ü—Ä–æ–≥—Ä–µ—Å –æ–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.');

  print('');
}

// =============================================================================
// TASK 3: Team Management and Development System
// =============================================================================

void task3() {
  print('TASK 3: Team Management and Development System');
  print('=' * 45);

  /*
  –ó–ê–í–î–ê–ù–ù–Ø:
  –°—Ç–≤–æ—Ä—ñ—Ç—å —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–æ—é —Ç–∞ —Ä–æ–∑–≤–∏—Ç–∫—É –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –Ω–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è.
  
  –ß–û–ú–£ –¶–ï –í–ê–ñ–õ–ò–í–û:
  –£ Formula 1 –∫–æ–º–∞–Ω–¥–∞ - —Ü–µ –Ω–µ —Ç—ñ–ª—å–∫–∏ –ø—ñ–ª–æ—Ç–∏, –∞ –π —Å–æ—Ç–Ω—ñ —ñ–Ω–∂–µ–Ω–µ—Ä—ñ–≤, –º–µ—Ö–∞–Ω—ñ–∫—ñ–≤, 
  –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤. –ö–æ–∂–µ–Ω –º–∞—î —Å–≤–æ—é —Ä–æ–ª—å, –∞–ª–µ –≤—Å—ñ –ø—Ä–∞—Ü—é—é—Ç—å —Ä–∞–∑–æ–º. –ù–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è 
  –¥–æ–∑–≤–æ–ª—è—î —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –≤—Å—ñ—Ö —á–ª–µ–Ω—ñ–≤ –∫–æ–º–∞–Ω–¥–∏.
  
  –ê–ù–ê–õ–û–ì–Ü–Ø:
  –£—è–≤—ñ—Ç—å —à–∫–æ–ª—É. –Ñ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–π –∫–ª–∞—Å "–£—á–∏—Ç–µ–ª—å" –∑ –∑–∞–≥–∞–ª—å–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ 
  (—ñ–º'—è, –∑–∞—Ä–ø–ª–∞—Ç–∞, —Ä–æ–±–æ—Ç–∞). –í—ñ–¥ –Ω—å–æ–≥–æ –Ω–∞—Å–ª—ñ–¥—É—é—Ç—å—Å—è: "–í—á–∏—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏", 
  "–í—á–∏—Ç–µ–ª—å —Ñ—ñ–∑–∏–∫–∏", "–î–∏—Ä–µ–∫—Ç–æ—Ä". –ö–æ–∂–µ–Ω –º–∞—î —Å–≤–æ—ó —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –º–µ—Ç–æ–¥–∏, –∞–ª–µ 
  –≤—Å—ñ —î –≤—á–∏—Ç–µ–ª—è–º–∏.
  
  –©–û –í–ò –°–¢–í–û–†–ò–¢–ï:
  1. –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–π –∫–ª–∞—Å TeamMember - –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –∫–ª–∞—Å –¥–ª—è –≤—Å—ñ—Ö —á–ª–µ–Ω—ñ–≤ –∫–æ–º–∞–Ω–¥–∏
  2. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –∫–ª–∞—Å–∏: Engineer, Mechanic, Manager
  3. –ö–ª–∞—Å TeamDevelopment –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ–∑–≤–∏—Ç–∫–æ–º –∫–æ–º–∞–Ω–¥–∏
  
  –ü–û–ö–†–û–ö–û–í–Ü –Ü–ù–°–¢–†–£–ö–¶–Ü–á:
  */

  print('üìã –î–ï–¢–ê–õ–¨–ù–Ü –Ü–ù–°–¢–†–£–ö–¶–Ü–á:');
  print('');

  print('–ö–†–û–ö 1: –°—Ç–≤–æ—Ä—ñ—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–π –∫–ª–∞—Å TeamMember');
  print('   - –¶–µ –±—É–¥–µ "–±–∞—Ç—å–∫–æ" –¥–ª—è –≤—Å—ñ—Ö —á–ª–µ–Ω—ñ–≤ –∫–æ–º–∞–Ω–¥–∏');
  print('   - –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏: work(), getRole(), getSalary()');
  print('   - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏: checkPerformance(), getTeamStatus()');
  print('   - –ü—Ä–∏–∫–ª–∞–¥:');
  print('     abstract class TeamMember {');
  print('       String name;');
  print('       String role;');
  print('       double salary;');
  print('       ');
  print('       abstract void work();');
  print('       abstract String getRole();');
  print('       abstract double getSalary();');
  print('       ');
  print('       void checkPerformance() { /* –∑–∞–≥–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ */ }');
  print('       String getTeamStatus() { /* —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥–∏ */ }');
  print('     }');
  print('');

  print('–ö–†–û–ö 2: –°—Ç–≤–æ—Ä—ñ—Ç—å Engineer (–Ü–Ω–∂–µ–Ω–µ—Ä)');
  print('   - –†–æ–∑—à–∏—Ä—é—î TeamMember');
  print('   - –í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ: specialization, experience, projects');
  print('   - –ú–µ—Ç–æ–¥–∏: designComponent(), analyzeData(), getEngineeringStats()');
  print('   - –ü—Ä–∏–∫–ª–∞–¥: Adrian Newey - –≥–æ–ª–æ–≤–Ω–∏–π –∞–µ—Ä–æ–¥–∏–Ω–∞–º—ñ–∫ Red Bull');
  print('   - –õ–æ–≥—ñ–∫–∞: —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤, –∞–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö');
  print('');

  print('–ö–†–û–ö 3: –°—Ç–≤–æ—Ä—ñ—Ç—å Mechanic (–ú–µ—Ö–∞–Ω—ñ–∫)');
  print('   - –†–æ–∑—à–∏—Ä—é—î TeamMember');
  print('   - –í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ: skills, certifications, pitStopExperience');
  print('   - –ú–µ—Ç–æ–¥–∏: repairCar(), performPitStop(), getMechanicStats()');
  print('   - –ü—Ä–∏–∫–ª–∞–¥: –º–µ—Ö–∞–Ω—ñ–∫–∏, —è–∫—ñ —Ä–æ–±–ª—è—Ç—å –ø—ñ—Ç-—Å—Ç–æ–ø–∏ –∑–∞ 2 —Å–µ–∫—É–Ω–¥–∏');
  print('   - –õ–æ–≥—ñ–∫–∞: —Ä–µ–º–æ–Ω—Ç –∞–≤—Ç–æ–º–æ–±—ñ–ª—è, —à–≤–∏–¥–∫—ñ –ø—ñ—Ç-—Å—Ç–æ–ø–∏');
  print('');

  print('–ö–†–û–ö 4: –°—Ç–≤–æ—Ä—ñ—Ç—å Manager (–ú–µ–Ω–µ–¥–∂–µ—Ä)');
  print('   - –†–æ–∑—à–∏—Ä—é—î TeamMember');
  print('   - –í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ: department, teamSize, budget');
  print('   - –ú–µ—Ç–æ–¥–∏: manageTeam(), makeDecisions(), getManagementStats()');
  print('   - –ü—Ä–∏–∫–ª–∞–¥: Christian Horner - –∫–µ—Ä—É—é—á–∏–π Red Bull Racing');
  print('   - –õ–æ–≥—ñ–∫–∞: —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–æ—é, –ø—Ä–∏–π–Ω—è—Ç—Ç—è —Ä—ñ—à–µ–Ω—å');
  print('');

  print('–ö–†–û–ö 5: –°—Ç–≤–æ—Ä—ñ—Ç—å TeamDevelopment (–†–æ–∑–≤–∏—Ç–æ–∫ –∫–æ–º–∞–Ω–¥–∏)');
  print('   - –í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ: team, budget, researchPoints, upgrades');
  print(
    '   - –ú–µ—Ç–æ–¥–∏: investInResearch(), developUpgrade(), calculatePerformance()',
  );
  print('   - –õ–æ–≥—ñ–∫–∞: —ñ–Ω–≤–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è, —Ä–æ–∑—Ä–æ–±–∫–∞ –ø–æ–∫—Ä–∞—â–µ–Ω—å');
  print('');

  print('–ü–†–ò–ö–õ–ê–î –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø:');
  print('''
  // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–º–∞–Ω–¥—É
  Team redBull = Team('Red Bull Racing', 1000000000);
  TeamDevelopment development = TeamDevelopment(redBull, 50000000);
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ —á–ª–µ–Ω—ñ–≤ –∫–æ–º–∞–Ω–¥–∏
  Engineer adrian = Engineer('Adrian Newey', 'Aerodynamics', 30, ['RB19', 'RB20']);
  Mechanic john = Mechanic('John Smith', ['Engine', 'Transmission'], ['F1 Safety'], 150);
  Manager christian = Manager('Christian Horner', 'Operations', 850, 500000000);
  
  // –î–æ–¥–∞—î–º–æ –¥–æ –∫–æ–º–∞–Ω–¥–∏
  development.addTeamMember(adrian);
  development.addTeamMember(john);
  development.addTeamMember(christian);
  
  // –†–æ–∑–≤–∏–≤–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É
  development.investInResearch(10000000);
  development.developUpgrade('Aerodynamic Package');
  development.calculatePerformance();
  ''');
  print('');

  print('üí° –ü–û–†–ê–î–ò:');
  print(
    '   - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ super() –¥–ª—è –≤–∏–∫–ª–∏–∫—É –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –∫–ª–∞—Å—É',
  );
  print('   - –î–æ–¥–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º—É —Ä—ñ–≤–Ω—ñ–≤ –¥–æ—Å–≤—ñ–¥—É –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞');
  print('   - –†–æ–∑–≥–ª—è–Ω—å—Ç–µ –≤–∑–∞—î–º–æ–¥—ñ—é –º—ñ–∂ —Ä—ñ–∑–Ω–∏–º–∏ —Ç–∏–ø–∞–º–∏ —á–ª–µ–Ω—ñ–≤ –∫–æ–º–∞–Ω–¥–∏');
  print('   - –î–æ–¥–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –±–æ–Ω—É—Å—ñ–≤ –∑–∞ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è');
  print('');

  // TODO: Create abstract TeamMember class

  // TODO: Create concrete team member classes

  // TODO: Create TeamDevelopment class

  // TODO: Test your implementation
  // Team redBull = Team('Red Bull Racing', 1000000000);
  // TeamDevelopment development = TeamDevelopment(redBull, 50000000);
  //
  // Engineer adrian = Engineer('Adrian Newey', 'Aerodynamics', 30, ['RB19', 'RB20']);
  // Mechanic john = Mechanic('John Smith', ['Engine', 'Transmission'], ['F1 Safety'], 150);
  // Manager christian = Manager('Christian Horner', 'Operations', 850, 500000000);
  //
  // development.addTeamMember(adrian);
  // development.addTeamMember(john);
  // development.addTeamMember(christian);
  //
  // development.investInResearch(10000000);
  // development.developUpgrade('Aerodynamic Package');
  // development.calculatePerformance();

  print('');

  // –ü–æ–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ
  ProgressTracker.markTaskCompleted('lesson_06', 'task3');
  print('\n‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è 3 –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ!');
  print('üìä –ü—Ä–æ–≥—Ä–µ—Å –æ–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.');

  print('');
}

// =============================================================================
// TASK 4: Championship Points and Scoring System
// =============================================================================

void task4() {
  print('TASK 4: Championship Points and Scoring System');
  print('=' * 45);

  /*
  –ó–ê–í–î–ê–ù–ù–Ø:
  –°—Ç–≤–æ—Ä—ñ—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—É —Å–∏—Å—Ç–µ–º—É –æ—á–æ–∫ —Ç–∞ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –±–∞–ª—ñ–≤ –¥–ª—è —á–µ–º–ø—ñ–æ–Ω–∞—Ç—É.
  
  –ß–û–ú–£ –¶–ï –í–ê–ñ–õ–ò–í–û:
  –£ Formula 1 —ñ—Å–Ω—É—î —Å–∫–ª–∞–¥–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –æ—á–æ–∫. 1-–µ –º—ñ—Å—Ü–µ –¥–∞—î 25 –æ—á–æ–∫, 
  2-–µ - 18, —ñ —Ç–∞–∫ –¥–∞–ª—ñ. –¢–∞–∫–æ–∂ —î –±–æ–Ω—É—Å–∏ –∑–∞ –Ω–∞–π—à–≤–∏–¥—à–∏–π –∫—Ä—É–≥, —Å–ø—Ä–∏–Ω—Ç-–≥–æ–Ω–∫–∏. 
  –ê–±—Å—Ç—Ä–∞–∫—Ü—ñ—è –¥–æ–∑–≤–æ–ª—è—î –ª–µ–≥–∫–æ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É.
  
  –ê–ù–ê–õ–û–ì–Ü–Ø:
  –£—è–≤—ñ—Ç—å —Ä—ñ–∑–Ω—ñ —à–∫–æ–ª–∏ –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è. –í –æ–¥–Ω—ñ–π —à–∫–æ–ª—ñ –º–∞–∫—Å–∏–º—É–º 
  100 –±–∞–ª—ñ–≤, –≤ —ñ–Ω—à—ñ–π - 12-–±–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞, –≤ —Ç—Ä–µ—Ç—ñ–π - –ª—ñ—Ç–µ—Ä–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ (A, B, C). 
  –ê–ª–µ –≤—Å—ñ –≤–æ–Ω–∏ –º–∞—é—Ç—å —Å–ø—ñ–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É - —Å–ø–æ—Å—ñ–± –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –æ—á–æ–∫.
  
  –©–û –í–ò –°–¢–í–û–†–ò–¢–ï:
  1. –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–π –∫–ª–∞—Å ScoringSystem - "—à–∞–±–ª–æ–Ω" –¥–ª—è —Å–∏—Å—Ç–µ–º –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É
  2. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Å–∏—Å—Ç–µ–º–∏: F1ScoringSystem, AlternativeScoringSystem
  3. –ö–ª–∞—Å ChampionshipStandings –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç—É—Ä–Ω—ñ—Ä–Ω–æ—é —Ç–∞–±–ª–∏—Ü–µ—é
  
  –ü–û–ö–†–û–ö–û–í–Ü –Ü–ù–°–¢–†–£–ö–¶–Ü–á:
  */

  print('üìã –î–ï–¢–ê–õ–¨–ù–Ü –Ü–ù–°–¢–†–£–ö–¶–Ü–á:');
  print('');

  print('–ö–†–û–ö 1: –°—Ç–≤–æ—Ä—ñ—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–π –∫–ª–∞—Å ScoringSystem');
  print('   - –¶–µ –±—É–¥–µ "—à–∞–±–ª–æ–Ω" –¥–ª—è –≤—Å—ñ—Ö —Å–∏—Å—Ç–µ–º –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –æ—á–æ–∫');
  print('   - –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏: calculatePoints(), getScoringRules()');
  print('   - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏: validateResult(), applyPenalties()');
  print('   - –ü—Ä–∏–∫–ª–∞–¥:');
  print('     abstract class ScoringSystem {');
  print('       abstract int calculatePoints(int position);');
  print('       abstract String getScoringRules();');
  print('       ');
  print('       bool validateResult(int position) {');
  print('         return position >= 1 && position <= 20;');
  print('       }');
  print('       ');
  print('       int applyPenalties(int points, List<String> penalties) {');
  print('         // –ª–æ–≥—ñ–∫–∞ —à—Ç—Ä–∞—Ñ—ñ–≤');
  print('         return points;');
  print('       }');
  print('     }');
  print('');

  print('–ö–†–û–ö 2: –°—Ç–≤–æ—Ä—ñ—Ç—å F1ScoringSystem (–°–∏—Å—Ç–µ–º–∞ F1)');
  print('   - –†–æ–∑—à–∏—Ä—é—î ScoringSystem');
  print('   - –í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ: pointsTable, sprintPoints, fastestLap');
  print(
    '   - –ú–µ—Ç–æ–¥–∏: calculateF1Points(), handleSprintRace(), awardFastestLap()',
  );
  print('   - –ü—Ä–∞–≤–∏–ª–∞ F1: 1-–µ = 25, 2-–µ = 18, 3-—î = 15, 4-–µ = 12, 5-–µ = 10...');
  print('   - –ë–æ–Ω—É—Å –∑–∞ –Ω–∞–π—à–≤–∏–¥—à–∏–π –∫—Ä—É–≥: +1 –æ—á–∫–æ (—è–∫—â–æ –≤ —Ç–æ–ø-10)');
  print('');

  print('–ö–†–û–ö 3: –°—Ç–≤–æ—Ä—ñ—Ç—å AlternativeScoringSystem (–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞ —Å–∏—Å—Ç–µ–º–∞)');
  print('   - –†–æ–∑—à–∏—Ä—é—î ScoringSystem');
  print('   - –í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ: alternativePoints, bonusPoints, multipliers');
  print(
    '   - –ú–µ—Ç–æ–¥–∏: calculateAlternativePoints(), applyBonus(), applyMultiplier()',
  );
  print('   - –ü—Ä–∏–∫–ª–∞–¥: —Å–∏—Å—Ç–µ–º–∞ 10-6-4-3-2-1 –∞–±–æ —Å–∏—Å—Ç–µ–º–∞ –∑ –º–Ω–æ–∂–Ω–∏–∫–∞–º–∏');
  print('   - –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –±–æ–Ω—É—Å–∏ –∑–∞ –æ–±–≥—ñ–Ω, –Ω–∞–π–∫—Ä–∞—â–∏–π —Å—Ç–∞—Ä—Ç');
  print('');

  print('–ö–†–û–ö 4: –°—Ç–≤–æ—Ä—ñ—Ç—å ChampionshipStandings (–¢—É—Ä–Ω—ñ—Ä–Ω–∞ —Ç–∞–±–ª–∏—Ü—è)');
  print('   - –í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ: drivers, teams, points, positions');
  print('   - –ú–µ—Ç–æ–¥–∏: updateStandings(), calculatePositions(), getLeader()');
  print('   - –õ–æ–≥—ñ–∫–∞: –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ø–æ–∑–∏—Ü—ñ–π, –æ–±—Ä–æ–±–∫–∞ –Ω—ñ—á–∏—ó—Ö, —à—Ç—Ä–∞—Ñ–∏');
  print('');

  print('–ü–†–ò–ö–õ–ê–î –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø:');
  print('''
  // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–∏—Å—Ç–µ–º–∏ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É
  F1ScoringSystem f1Scoring = F1ScoringSystem();
  AlternativeScoringSystem altScoring = AlternativeScoringSystem();
  ChampionshipStandings standings = ChampionshipStandings();
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–ª–æ—Ç—ñ–≤
  Driver max = Driver('Max Verstappen', 'Red Bull', 1);
  Driver lewis = Driver('Lewis Hamilton', 'Mercedes', 44);
  Driver charles = Driver('Charles Leclerc', 'Ferrari', 16);
  
  // –î–æ–¥–∞—î–º–æ –¥–æ —Ç—É—Ä–Ω—ñ—Ä–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
  standings.addDriver(max);
  standings.addDriver(lewis);
  standings.addDriver(charles);
  
  // –û–Ω–æ–≤–ª—é—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
  standings.updateStandings(max, 1, f1Scoring);  // 25 –æ—á–æ–∫
  standings.updateStandings(lewis, 2, f1Scoring); // 18 –æ—á–æ–∫
  standings.updateStandings(charles, 3, f1Scoring); // 15 –æ—á–æ–∫
  
  // –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó
  standings.calculatePositions();
  print('–õ—ñ–¥–µ—Ä: \${standings.getLeader()}');
  standings.displayStandings();
  ''');
  print('');

  print('üí° –ü–û–†–ê–î–ò:');
  print('   - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Map –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ –æ—á–æ–∫: {1: 25, 2: 18, 3: 15...}');
  print(
    '   - –î–æ–¥–∞–π—Ç–µ –æ–±—Ä–æ–±–∫—É –Ω—ñ—á–∏—ó—Ö (–∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø–µ—Ä–µ–º–æ–≥, –ø–æ—Ç—ñ–º –∑–∞ 2-–º–∏ –º—ñ—Å—Ü—è–º–∏)',
  );
  print(
    '   - –†–æ–∑–≥–ª—è–Ω—å—Ç–µ —à—Ç—Ä–∞—Ñ–∏ (time penalty, grid penalty, disqualification)',
  );
  print('   - –î–æ–¥–∞–π—Ç–µ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø—ñ–ª–æ—Ç–∞');
  print('');

  // TODO: Create abstract ScoringSystem class

  // TODO: Create concrete scoring system classes

  // TODO: Create ChampionshipStandings class

  // TODO: Test your implementation
  // F1ScoringSystem f1Scoring = F1ScoringSystem();
  // AlternativeScoringSystem altScoring = AlternativeScoringSystem();
  // ChampionshipStandings standings = ChampionshipStandings();
  //
  // Driver max = Driver('Max Verstappen', 'Red Bull', 1);
  // Driver lewis = Driver('Lewis Hamilton', 'Mercedes', 44);
  // Driver charles = Driver('Charles Leclerc', 'Ferrari', 16);
  //
  // standings.addDriver(max);
  // standings.addDriver(lewis);
  // standings.addDriver(charles);
  //
  // standings.updateStandings(max, 1, f1Scoring);
  // standings.updateStandings(lewis, 2, f1Scoring);
  // standings.updateStandings(charles, 3, f1Scoring);
  //
  // standings.calculatePositions();
  // print('Leader: ${standings.getLeader()}');
  // standings.displayStandings();

  print('');

  // –ü–æ–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ
  ProgressTracker.markTaskCompleted('lesson_06', 'task4');
  print('\n‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è 4 –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ!');
  print('üìä –ü—Ä–æ–≥—Ä–µ—Å –æ–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.');

  print('');
}

// =============================================================================
// TASK 5: Advanced - Complete Championship Simulator Integration
// =============================================================================

void task5() {
  print('TASK 5: Advanced Complete Championship Simulator');
  print('=' * 45);

  /*
  –ó–ê–í–î–ê–ù–ù–Ø:
  –Ü–Ω—Ç–µ–≥—Ä—É–π—Ç–µ –≤—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –≤ –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∏–π —Å–∏–º—É–ª—è—Ç–æ—Ä —á–µ–º–ø—ñ–æ–Ω–∞—Ç—É.
  
  –ß–û–ú–£ –¶–ï –í–ê–ñ–õ–ò–í–û:
  –¶–µ —Ñ—ñ–Ω–∞–ª—å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è, —è–∫–µ –æ–±'—î–¥–Ω—É—î –≤—Å—ñ –ø—Ä–∏–Ω—Ü–∏–ø–∏ –û–û–ü. –í–∏ —Å—Ç–≤–æ—Ä–∏—Ç–µ 
  —Å–∫–ª–∞–¥–Ω—É —Å–∏—Å—Ç–µ–º—É, –¥–µ —Ä—ñ–∑–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –≤–∑–∞—î–º–æ–¥—ñ—é—Ç—å –º—ñ–∂ —Å–æ–±–æ—é. –¶–µ 
  –ø–æ–∫–∞–∑—É—î, —è–∫ –∞–±—Å—Ç—Ä–∞–∫—Ü—ñ—è, –Ω–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è, –ø–æ–ª—ñ–º–æ—Ä—Ñ—ñ–∑–º —Ç–∞ —ñ–Ω–∫–∞–ø—Å—É–ª—è—Ü—ñ—è 
  –ø—Ä–∞—Ü—é—é—Ç—å —Ä–∞–∑–æ–º —É —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ.
  
  –ê–ù–ê–õ–û–ì–Ü–Ø:
  –£—è–≤—ñ—Ç—å, —â–æ –≤–∏ –±—É–¥—É—î—Ç–µ –º—ñ—Å—Ç–æ. –£ –≤–∞—Å —î —Ä—ñ–∑–Ω—ñ –±—É–¥—ñ–≤–ª—ñ (–∫–ª–∞—Å–∏), —è–∫—ñ 
  –º–∞—é—Ç—å —Å–ø—ñ–ª—å–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–Ω–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è), –∞–ª–µ –∫–æ–∂–Ω–∞ –º–∞—î —Å–≤–æ—î 
  –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è (–ø–æ–ª—ñ–º–æ—Ä—Ñ—ñ–∑–º). –ú—ñ–∂ –±—É–¥—ñ–≤–ª—è–º–∏ —î –∑–≤'—è–∑–∫–∏ (–ø–æ–¥—ñ—ó), –∞ 
  —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞–∑—É—î, —è–∫ –º—ñ—Å—Ç–æ —Ä–æ–∑–≤–∏–≤–∞—î—Ç—å—Å—è. –í—Å–µ –ø—Ä–∞—Ü—é—î —Ä–∞–∑–æ–º 
  —è–∫ —î–¥–∏–Ω–∞ —Å–∏—Å—Ç–µ–º–∞.
  
  –©–û –í–ò –°–¢–í–û–†–ò–¢–ï:
  1. ChampionshipSimulator - –≥–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å, —è–∫–∏–π –∫–µ—Ä—É—î –≤—Å—ñ–º
  2. EventManager - —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥—ñ–π –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –º—ñ–∂ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
  3. StatisticsTracker - –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞
  
  –ü–û–ö–†–û–ö–û–í–Ü –Ü–ù–°–¢–†–£–ö–¶–Ü–á:
  */

  print('üìã –î–ï–¢–ê–õ–¨–ù–Ü –Ü–ù–°–¢–†–£–ö–¶–Ü–á:');
  print('');

  print('–ö–†–û–ö 1: –°—Ç–≤–æ—Ä—ñ—Ç—å ChampionshipSimulator (–ì–æ–ª–æ–≤–Ω–∏–π —Å–∏–º—É–ª—è—Ç–æ—Ä)');
  print('   - –¶–µ –±—É–¥–µ "–º–æ–∑–æ–∫" –≤—Å—å–æ–≥–æ —á–µ–º–ø—ñ–æ–Ω–∞—Ç—É');
  print(
    '   - –í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ: championship, raceSimulator, teamDevelopment, standings',
  );
  print(
    '   - –ú–µ—Ç–æ–¥–∏: initializeSeason(), simulateRace(), updateDevelopment(), generateReport()',
  );
  print('   - –õ–æ–≥—ñ–∫–∞: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—è –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤, —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–µ–∑–æ–Ω–æ–º');
  print('   - –ü—Ä–∏–∫–ª–∞–¥:');
  print('     class ChampionshipSimulator {');
  print('       int season;');
  print('       List<Team> teams;');
  print('       RaceSimulator raceSimulator;');
  print('       TeamDevelopment teamDevelopment;');
  print('       ChampionshipStandings standings;');
  print('       ');
  print('       void initializeSeason() { /* –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ–∑–æ–Ω—É */ }');
  print('       void simulateRace() { /* —Å–∏–º—É–ª—è—Ü—ñ—è –≥–æ–Ω–∫–∏ */ }');
  print('       void generateReport() { /* –∑–≤—ñ—Ç */ }');
  print('     }');
  print('');

  print('–ö–†–û–ö 2: –°—Ç–≤–æ—Ä—ñ—Ç—å EventManager (–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥—ñ–π)');
  print('   - –¶–µ –±—É–¥–µ "—Å–∏—Å—Ç–µ–º–∞ —Å–ø–æ–≤—ñ—â–µ–Ω—å" –º—ñ–∂ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏');
  print('   - –í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ: events, eventTypes, eventHandlers');
  print('   - –ú–µ—Ç–æ–¥–∏: addEvent(), triggerEvent(), handleEvent()');
  print('   - –õ–æ–≥—ñ–∫–∞: –ø–æ–¥—ñ—ó —è–∫ "–≥–æ–Ω–∫–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞", "–ø—ñ–ª–æ—Ç –¥–∏—Å–∫–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π"');
  print(
    '   - –ü—Ä–∏–∫–ª–∞–¥ –ø–æ–¥—ñ–π: RaceFinished, DriverDNF, TeamUpgrade, PenaltyApplied',
  );
  print('');

  print('–ö–†–û–ö 3: –°—Ç–≤–æ—Ä—ñ—Ç—å StatisticsTracker (–í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)');
  print('   - –¶–µ –±—É–¥–µ "–∞–Ω–∞–ª—ñ—Ç–∏–∫" —á–µ–º–ø—ñ–æ–Ω–∞—Ç—É');
  print('   - –í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ: statistics, records, trends');
  print(
    '   - –ú–µ—Ç–æ–¥–∏: trackStatistic(), updateRecord(), analyzeTrends(), generateReport()',
  );
  print('   - –õ–æ–≥—ñ–∫–∞: –∑–±—ñ—Ä –¥–∞–Ω–∏—Ö, –∞–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—ñ–≤, —Ä–µ–∫–æ—Ä–¥–∏');
  print('   - –ü—Ä–∏–∫–ª–∞–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: –Ω–∞–π—à–≤–∏–¥—à—ñ –∫—Ä—É–≥–∏, –Ω–∞–π–∫—Ä–∞—â—ñ —Å—Ç–∞—Ä—Ç–∏, DNF');
  print('');

  print('–ü–†–ò–ö–õ–ê–î –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø:');
  print('''
  // –°—Ç–≤–æ—Ä—é—î–º–æ –≥–æ–ª–æ–≤–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏
  ChampionshipSimulator simulator = ChampionshipSimulator(2024);
  EventManager eventManager = EventManager();
  StatisticsTracker statsTracker = StatisticsTracker();
  
  // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Å–∏–º—É–ª—è—Ç–æ—Ä
  simulator.initializeSeason();
  simulator.addEventManager(eventManager);
  simulator.addStatisticsTracker(statsTracker);
  
  // –î–æ–¥–∞—î–º–æ –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ –ø—ñ–ª–æ—Ç—ñ–≤
  Team redBull = Team('Red Bull Racing', 1000000000);
  Driver max = Driver('Max Verstappen', 'Red Bull Racing', 1);
  redBull.addDriver(max);
  simulator.addTeam(redBull);
  
  // –°–∏–º—É–ª—é—î–º–æ —Å–µ–∑–æ–Ω
  simulator.simulateSeason();
  simulator.generateReport();
  statsTracker.generateReport();
  ''');
  print('');

  print('üí° –ü–û–†–ê–î–ò:');
  print(
    '   - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ enum –¥–ª—è —Ç–∏–ø—ñ–≤ –ø–æ–¥—ñ–π (RaceEvent, TeamEvent, DriverEvent)',
  );
  print('   - –î–æ–¥–∞–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–¥—ñ–π');
  print('   - –†–æ–∑–≥–ª—è–Ω—å—Ç–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è/–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —Å–∏–º—É–ª—è—Ü—ñ—ó');
  print('   - –î–æ–¥–∞–π—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω—ñ —Ñ–∞–π–ª–∏ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è');
  print('   - –°—Ç–≤–æ—Ä—ñ—Ç—å –≥—Ä–∞—Ñ—ñ—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤');
  print('');

  // TODO: Create ChampionshipSimulator class

  // TODO: Create EventManager class

  // TODO: Create StatisticsTracker class

  // TODO: Test your implementation
  // ChampionshipSimulator simulator = ChampionshipSimulator(2024);
  // EventManager eventManager = EventManager();
  // StatisticsTracker statsTracker = StatisticsTracker();
  //
  // simulator.initializeSeason();
  // simulator.addEventManager(eventManager);
  // simulator.addStatisticsTracker(statsTracker);
  //
  // // Add teams and drivers
  // Team redBull = Team('Red Bull Racing', 1000000000);
  // Driver max = Driver('Max Verstappen', 'Red Bull Racing', 1);
  // redBull.addDriver(max);
  // simulator.addTeam(redBull);
  //
  // // Simulate season
  // simulator.simulateSeason();
  // simulator.generateReport();
  // statsTracker.generateReport();

  print('');

  // –ü–æ–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ
  ProgressTracker.markTaskCompleted('lesson_06', 'task5');
  print('\n‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è 5 –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ!');
  print('üìä –ü—Ä–æ–≥—Ä–µ—Å –æ–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.');

  print('');
}

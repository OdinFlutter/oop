import 'dart:io';

void main() {
  print('üîß –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ü–†–û–ì–†–ï–°-–¢–†–ï–ö–ï–†–ê –î–õ–Ø –í–°–Ü–• –£–†–û–ö–Ü–í');
  print('=' * 50);

  // –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —É—Ä–æ–∫—ñ–≤
  final lessons = [
    'lesson_01',
    'lesson_02',
    'lesson_03',
    'lesson_04',
    'lesson_05',
    'lesson_06',
  ];

  for (final lesson in lessons) {
    final practiceFile = '$lesson/practice.dart';
    final solutionsFile = '$lesson/solutions.dart';

    print('\nüìö –û–±—Ä–æ–±–ª—è—î–º–æ $lesson...');

    // –û–Ω–æ–≤–ª—é—î–º–æ practice.dart
    if (File(practiceFile).existsSync()) {
      _updatePracticeFile(practiceFile, lesson);
      print('‚úÖ $practiceFile –æ–Ω–æ–≤–ª–µ–Ω–æ');
    } else {
      print('‚ùå $practiceFile –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ solutions.dart
    if (File(solutionsFile).existsSync()) {
      _updateSolutionsFile(solutionsFile, lesson);
      print('‚úÖ $solutionsFile –æ–Ω–æ–≤–ª–µ–Ω–æ');
    } else {
      print('‚ùå $solutionsFile –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
    }
  }

  print('\nüéâ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  print('üí° –¢–µ–ø–µ—Ä –∫–æ–∂–µ–Ω practice.dart –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏–º–µ –ø—Ä–æ–≥—Ä–µ—Å –∫—É—Ä—Å—É.');
  print('üìä –ó–∞–≤–¥–∞–Ω–Ω—è –±—É–¥—É—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–∑–Ω–∞—á–µ–Ω—ñ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω—ñ.');
}

void _updatePracticeFile(String filePath, String lesson) {
  final file = File(filePath);
  String content = file.readAsStringSync();

  // –î–æ–¥–∞—î–º–æ —ñ–º–ø–æ—Ä—Ç progress.dart
  if (!content.contains("import '../progress.dart';")) {
    content = content.replaceFirst(
      '// –£–†–û–ö',
      "import '../progress.dart';\n\n// –£–†–û–ö",
    );
  }

  // –û–Ω–æ–≤–ª—é—î–º–æ main() —Ñ—É–Ω–∫—Ü—ñ—é
  if (content.contains('void main() {')) {
    content = _updateMainFunction(content, lesson);
  }

  // –î–æ–¥–∞—î–º–æ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö
  content = _addTaskCompletion(content, lesson);

  file.writeAsStringSync(content);
}

void _updateSolutionsFile(String filePath, String lesson) {
  final file = File(filePath);
  String content = file.readAsStringSync();

  // –î–æ–¥–∞—î–º–æ —ñ–º–ø–æ—Ä—Ç progress.dart
  if (!content.contains("import '../progress.dart';")) {
    content = content.replaceFirst(
      '// –£–†–û–ö',
      "import '../progress.dart';\n\n// –£–†–û–ö",
    );
  }

  // –û–Ω–æ–≤–ª—é—î–º–æ main() —Ñ—É–Ω–∫—Ü—ñ—é
  if (content.contains('void main() {')) {
    content = _updateMainFunction(content, lesson);
  }

  // –î–æ–¥–∞—î–º–æ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–∏—Ö
  content = _addTaskCompletion(content, lesson);

  file.writeAsStringSync(content);
}

String _updateMainFunction(String content, String lesson) {
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ—á–∞—Ç–æ–∫ main() —Ñ—É–Ω–∫—Ü—ñ—ó
  final mainStart = content.indexOf('void main() {');
  if (mainStart == -1) return content;

  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫—ñ–Ω–µ—Ü—å main() —Ñ—É–Ω–∫—Ü—ñ—ó
  final mainEnd = _findMainEnd(content, mainStart);
  if (mainEnd == -1) return content;

  // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É —É—Ä–æ–∫—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  final lessonNames = {
    'lesson_01': '–ö–õ–ê–°–ò –¢–ê –û–ë\'–Ñ–ö–¢–ò',
    'lesson_02': '–Ü–ù–ö–ê–ü–°–£–õ–Ø–¶–Ü–Ø',
    'lesson_03': '–ù–ê–°–õ–Ü–î–£–í–ê–ù–ù–Ø',
    'lesson_04': '–ü–û–õ–Ü–ú–û–†–§–Ü–ó–ú',
    'lesson_05': '–ê–ë–°–¢–†–ê–ö–¶–Ü–Ø',
    'lesson_06': '–§–Ü–ù–ê–õ–¨–ù–ò–ô –ü–†–û–ï–ö–¢',
  };

  final lessonName = lessonNames[lesson] ?? lesson.toUpperCase();

  // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π main()
  final newMain =
      '''
void main() {
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å-—Ç—Ä–µ–∫–µ—Ä
  ProgressTracker.initialize();
  
  // –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –∫—É—Ä—Å—É
  ProgressTracker.displayProgress();
  
  print('\\nüéØ –ü–†–ê–ö–¢–ò–ö–ê ‚Äî –£–†–û–ö ${lesson.substring(8)}: $lessonName');
  print('=' * 50);

  // –†–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
  // task1();
  // task2();
  // task3();
  // task4();
  // task5();

  print('\\nüí° –ü–æ—Ä–∞–¥–∞: –†–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ task1() –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏!');
  print('üìö –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ solutions.dart –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è.');
}
''';

  // –ó–∞–º—ñ–Ω—é—î–º–æ —Å—Ç–∞—Ä–∏–π main() –Ω–∞ –Ω–æ–≤–∏–π
  return content.substring(0, mainStart) +
      newMain +
      content.substring(mainEnd + 1);
}

int _findMainEnd(String content, int start) {
  int braceCount = 0;
  bool inMain = false;

  for (int i = start; i < content.length; i++) {
    if (content[i] == '{') {
      braceCount++;
      inMain = true;
    } else if (content[i] == '}') {
      braceCount--;
      if (inMain && braceCount == 0) {
        return i;
      }
    }
  }

  return -1;
}

String _addTaskCompletion(String content, String lesson) {
  // –î–æ–¥–∞—î–º–æ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–æ–≥–æ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ taskX()
  for (int i = 1; i <= 5; i++) {
    final taskName = 'task$i';
    final taskPattern = 'void $taskName() {';

    if (content.contains(taskPattern)) {
      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫—ñ–Ω–µ—Ü—å —Ñ—É–Ω–∫—Ü—ñ—ó taskX
      final taskStart = content.indexOf(taskPattern);
      final taskEnd = _findTaskEnd(content, taskStart);

      if (taskEnd != -1) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —î –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
        final taskContent = content.substring(taskStart, taskEnd);
        if (!taskContent.contains('ProgressTracker.markTaskCompleted')) {
          // –î–æ–¥–∞—î–º–æ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–æ–≥–æ
          final completionCode =
              '''

  // –ü–æ–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ
  ProgressTracker.markTaskCompleted('$lesson', '$taskName');
  print('\\n‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è $i –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–µ!');
  print('üìä –ü—Ä–æ–≥—Ä–µ—Å –æ–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.');

  print('');''';

          content =
              content.substring(0, taskEnd) +
              completionCode +
              content.substring(taskEnd);
        }
      }
    }
  }

  return content;
}

int _findTaskEnd(String content, int start) {
  int braceCount = 0;
  bool inTask = false;

  for (int i = start; i < content.length; i++) {
    if (content[i] == '{') {
      braceCount++;
      inTask = true;
    } else if (content[i] == '}') {
      braceCount--;
      if (inTask && braceCount == 0) {
        return i;
      }
    }
  }

  return -1;
}
